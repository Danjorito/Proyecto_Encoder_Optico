
AllTogetherOpticalEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067b4  080067b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067bc  080067bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080067c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000068  0800682c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800682c  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118a7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b2  00000000  00000000  00031982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00033f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca2  00000000  00000000  00034f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ba5  00000000  00000000  00035c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a5b  00000000  00000000  000597af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4a1  00000000  00000000  0006c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b80  00000000  00000000  001466ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006690 	.word	0x08006690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006690 	.word	0x08006690

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Set_LED>:

uint8_t LED_Data[MAX_LED][4]; //Variable for led data before brightness adjust
uint8_t LED_Bri[MAX_LED][4];  //Variable for led data after brightness adjust
uint16_t pwmData[(24*MAX_LED)+50];

void Set_LED (int LEDid, int Red, int Green, int Blue){
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
	LED_Data[LEDid][0] = LEDid;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <Set_LED+0x58>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDid][1] = Green;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	b2d9      	uxtb	r1, r3
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <Set_LED+0x58>)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	460a      	mov	r2, r1
 80005a4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDid][2] = Red;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	b2d9      	uxtb	r1, r3
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <Set_LED+0x58>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	460a      	mov	r2, r1
 80005b4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDid][3] = Blue;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	b2d9      	uxtb	r1, r3
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <Set_LED+0x58>)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	460a      	mov	r2, r1
 80005c4:	70da      	strb	r2, [r3, #3]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200001ec 	.word	0x200001ec

080005d8 <Set_Brightness_LED>:

void Set_Brightness_LED (float brightness)  // 0-1
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	ed87 0a01 	vstr	s0, [r7, #4]
	if (brightness > 1) brightness = 1;
 80005e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80005e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f2:	dd02      	ble.n	80005fa <Set_Brightness_LED+0x22>
 80005f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80005f8:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 80005fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80005fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000606:	d502      	bpl.n	800060e <Set_Brightness_LED+0x36>
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e030      	b.n	8000676 <Set_Brightness_LED+0x9e>
	{
		LED_Bri[i][0] = LED_Data[i][0];
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <Set_Brightness_LED+0xb4>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800061c:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <Set_Brightness_LED+0xb8>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000624:	2301      	movs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	e01f      	b.n	800066a <Set_Brightness_LED+0x92>
		{
			LED_Bri[i][j] = (int)(LED_Data[i][j])/(brightness);
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <Set_Brightness_LED+0xb4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	441a      	add	r2, r3
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000640:	ed97 7a01 	vldr	s14, [r7, #4]
 8000644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800064c:	edc7 7a00 	vstr	s15, [r7]
 8000650:	783b      	ldrb	r3, [r7, #0]
 8000652:	b2d9      	uxtb	r1, r3
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <Set_Brightness_LED+0xb8>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	441a      	add	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3301      	adds	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	2b03      	cmp	r3, #3
 800066e:	dddc      	ble.n	800062a <Set_Brightness_LED+0x52>
	for (int i=0; i<MAX_LED; i++)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b03      	cmp	r3, #3
 800067a:	ddcb      	ble.n	8000614 <Set_Brightness_LED+0x3c>
		}
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200001ec 	.word	0x200001ec
 8000690:	200001fc 	.word	0x200001fc

08000694 <Apply_LED>:

void Apply_LED (void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	e036      	b.n	8000712 <Apply_LED+0x7e>
	{
		color = ((LED_Bri[i][1]<<16) | (LED_Bri[i][2]<<8) | (LED_Bri[i][3]));
 80006a4:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <Apply_LED+0xcc>)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	492b      	ldr	r1, [pc, #172]	; (8000760 <Apply_LED+0xcc>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	431a      	orrs	r2, r3
 80006be:	4928      	ldr	r1, [pc, #160]	; (8000760 <Apply_LED+0xcc>)
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 80006cc:	2317      	movs	r3, #23
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e019      	b.n	8000706 <Apply_LED+0x72>
		{
			if (color&(1<<i))
 80006d2:	2201      	movs	r2, #1
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d005      	beq.n	80006f0 <Apply_LED+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <Apply_LED+0xd0>)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	213c      	movs	r1, #60	; 0x3c
 80006ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006ee:	e004      	b.n	80006fa <Apply_LED+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <Apply_LED+0xd0>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	211e      	movs	r1, #30
 80006f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3b01      	subs	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	dae2      	bge.n	80006d2 <Apply_LED+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	2b03      	cmp	r3, #3
 8000716:	ddc5      	ble.n	80006a4 <Apply_LED+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	e00a      	b.n	8000734 <Apply_LED+0xa0>
	{
		pwmData[indx] = 0;
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <Apply_LED+0xd0>)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2100      	movs	r1, #0
 8000724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3301      	adds	r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b31      	cmp	r3, #49	; 0x31
 8000738:	ddf1      	ble.n	800071e <Apply_LED+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	b29b      	uxth	r3, r3
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <Apply_LED+0xd0>)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <Apply_LED+0xd4>)
 8000744:	f002 fd8e 	bl	8003264 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(WAIT_TIME_TEMPORAL_FIX_MS);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 fde3 	bl	8001314 <HAL_Delay>
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800074e:	2100      	movs	r1, #0
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <Apply_LED+0xd4>)
 8000752:	f002 ff85 	bl	8003660 <HAL_TIM_PWM_Stop_DMA>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001fc 	.word	0x200001fc
 8000764:	2000020c 	.word	0x2000020c
 8000768:	20000084 	.word	0x20000084

0800076c <Get_Encoder_Val>:

int Get_Encoder_Val(void){
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	return TIM2->CNT/4;
 8000770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000776:	089b      	lsrs	r3, r3, #2
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fd47 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f8df 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa5f 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000796:	f000 fa3f 	bl	8000c18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800079a:	f000 fa0d 	bl	8000bb8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800079e:	f000 f929 	bl	80009f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007a2:	f000 f9b5 	bl	8000b10 <MX_TIM2_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007a6:	213c      	movs	r1, #60	; 0x3c
 80007a8:	4863      	ldr	r0, [pc, #396]	; (8000938 <main+0x1b4>)
 80007aa:	f003 f8e7 	bl	800397c <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN 2 */
  int i;
  for(i=0; i<MAX_LED; i++){
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	e008      	b.n	80007c6 <main+0x42>
	  Set_LED(i, 255, 255, 255);
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	21ff      	movs	r1, #255	; 0xff
 80007ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007bc:	f7ff fede 	bl	800057c <Set_LED>
  for(i=0; i<MAX_LED; i++){
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	3301      	adds	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	ddf3      	ble.n	80007b4 <main+0x30>
  }
  Set_Brightness_LED(0.1);
 80007cc:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800093c <main+0x1b8>
 80007d0:	f7ff ff02 	bl	80005d8 <Set_Brightness_LED>
  Apply_LED();
 80007d4:	f7ff ff5e 	bl	8000694 <Apply_LED>

  int step = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  int Red = 255;
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	623b      	str	r3, [r7, #32]
  int Green = 255;
 80007e0:	23ff      	movs	r3, #255	; 0xff
 80007e2:	61fb      	str	r3, [r7, #28]
  int Blue = 255;
 80007e4:	23ff      	movs	r3, #255	; 0xff
 80007e6:	61bb      	str	r3, [r7, #24]
  int defa = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  int Cont_color = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  int EncoderValP = (Get_Encoder_Val())*step; //Previous value for encoder
 80007f0:	f7ff ffbc 	bl	800076c <Get_Encoder_Val>
 80007f4:	4602      	mov	r2, r0
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	60fb      	str	r3, [r7, #12]
  int EncoderValC = 0; //Current value for encoder
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  int EncoderDiff = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EncoderValC = (Get_Encoder_Val())*step;
 8000806:	f7ff ffb1 	bl	800076c <Get_Encoder_Val>
 800080a:	4602      	mov	r2, r0
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	603b      	str	r3, [r7, #0]
	  EncoderDiff = EncoderValC - EncoderValP;
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	60bb      	str	r3, [r7, #8]
	  if(abs(EncoderDiff) > 255) EncoderDiff = 0;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bfb8      	it	lt
 8000822:	425b      	neglt	r3, r3
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	dd01      	ble.n	800082c <main+0xa8>
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
	  if(Cont_color == 0){
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10f      	bne.n	8000852 <main+0xce>
		  Red += EncoderDiff;
 8000832:	6a3a      	ldr	r2, [r7, #32]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	623b      	str	r3, [r7, #32]
		  if(Red < 0) Red = 0;
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	2b00      	cmp	r3, #0
 800083e:	da02      	bge.n	8000846 <main+0xc2>
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
 8000844:	e02a      	b.n	800089c <main+0x118>
		  else if(Red > 255) Red = 255;
 8000846:	6a3b      	ldr	r3, [r7, #32]
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	dd27      	ble.n	800089c <main+0x118>
 800084c:	23ff      	movs	r3, #255	; 0xff
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	e024      	b.n	800089c <main+0x118>
	  } else if(Cont_color == 1){
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d10f      	bne.n	8000878 <main+0xf4>
		  Green += EncoderDiff;
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4413      	add	r3, r2
 800085e:	61fb      	str	r3, [r7, #28]
		  if(Green < 0) Green = 0;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da02      	bge.n	800086c <main+0xe8>
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	e017      	b.n	800089c <main+0x118>
		  else if(Green > 255) Green = 255;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	2bff      	cmp	r3, #255	; 0xff
 8000870:	dd14      	ble.n	800089c <main+0x118>
 8000872:	23ff      	movs	r3, #255	; 0xff
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	e011      	b.n	800089c <main+0x118>
	  } else if(Cont_color == 2){
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d10e      	bne.n	800089c <main+0x118>
		  Blue += EncoderDiff;
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4413      	add	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
		  if(Blue < 0) Blue = 0;
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	2b00      	cmp	r3, #0
 800088a:	da02      	bge.n	8000892 <main+0x10e>
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	e004      	b.n	800089c <main+0x118>
		  else if(Blue > 255) Blue = 255;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2bff      	cmp	r3, #255	; 0xff
 8000896:	dd01      	ble.n	800089c <main+0x118>
 8000898:	23ff      	movs	r3, #255	; 0xff
 800089a:	61bb      	str	r3, [r7, #24]
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){
 800089c:	2110      	movs	r1, #16
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f001 fa5d 	bl	8001d60 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d113      	bne.n	80008d4 <main+0x150>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){
 80008ac:	2110      	movs	r1, #16
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f001 fa55 	bl	8001d60 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f7      	beq.n	80008ac <main+0x128>
			  defa = defa;
		  }
		  Cont_color = (Cont_color+1)%3;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <main+0x1bc>)
 80008c2:	fb83 3102 	smull	r3, r1, r3, r2
 80008c6:	17d3      	asrs	r3, r2, #31
 80008c8:	1ac9      	subs	r1, r1, r3
 80008ca:	460b      	mov	r3, r1
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	440b      	add	r3, r1
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	613b      	str	r3, [r7, #16]
	  }
	  for(i=0; i<MAX_LED; i++){
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
 80008d8:	e008      	b.n	80008ec <main+0x168>
		  Set_LED(i, Red, Green, Blue);
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	6a39      	ldr	r1, [r7, #32]
 80008e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008e2:	f7ff fe4b 	bl	800057c <Set_LED>
	  for(i=0; i<MAX_LED; i++){
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	3301      	adds	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	ddf3      	ble.n	80008da <main+0x156>
	  }
	  Set_Brightness_LED(1);
 80008f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008f6:	f7ff fe6f 	bl	80005d8 <Set_Brightness_LED>
	  Apply_LED();
 80008fa:	f7ff fecb 	bl	8000694 <Apply_LED>
	  if(EZ){
		  if(Cont_color == 0) printf("Red: %d, Green: %d, Blue: %d, Changing Red\r\n", Red, Green, Blue);
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d106      	bne.n	8000912 <main+0x18e>
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	6a39      	ldr	r1, [r7, #32]
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <main+0x1c0>)
 800090c:	f005 f84a 	bl	80059a4 <iprintf>
 8000910:	e00f      	b.n	8000932 <main+0x1ae>
		  else if(Cont_color == 1) printf("Red: %d, Green: %d, Blue: %d, Changing Green\r\n", Red, Green, Blue);
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d106      	bne.n	8000926 <main+0x1a2>
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	6a39      	ldr	r1, [r7, #32]
 800091e:	480a      	ldr	r0, [pc, #40]	; (8000948 <main+0x1c4>)
 8000920:	f005 f840 	bl	80059a4 <iprintf>
 8000924:	e005      	b.n	8000932 <main+0x1ae>
		  else printf("Red: %d, Green: %d, Blue: %d, Changing Blue\r\n", Red, Green, Blue);
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	69fa      	ldr	r2, [r7, #28]
 800092a:	6a39      	ldr	r1, [r7, #32]
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <main+0x1c8>)
 800092e:	f005 f839 	bl	80059a4 <iprintf>
		  } else{
			  printf("Blue: %d \r\n", Blue);
		  }
	  }

	  EncoderValP = EncoderValC;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	60fb      	str	r3, [r7, #12]
	  EncoderValC = (Get_Encoder_Val())*step;
 8000936:	e766      	b.n	8000806 <main+0x82>
 8000938:	200000d0 	.word	0x200000d0
 800093c:	3dcccccd 	.word	0x3dcccccd
 8000940:	55555556 	.word	0x55555556
 8000944:	080066a8 	.word	0x080066a8
 8000948:	080066d8 	.word	0x080066d8
 800094c:	08006708 	.word	0x08006708

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2244      	movs	r2, #68	; 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 f875 	bl	8005a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000976:	f001 fa31 	bl	8001ddc <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000980:	f000 f9f6 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000996:	2302      	movs	r3, #2
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 800099e:	2309      	movs	r3, #9
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009a2:	2307      	movs	r3, #7
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fa68 	bl	8001e88 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009be:	f000 f9d7 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	2104      	movs	r1, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fe68 	bl	80026b0 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 f9c3 	bl	8000d70 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3758      	adds	r7, #88	; 0x58
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	; 0x58
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	222c      	movs	r2, #44	; 0x2c
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f005 f814 	bl	8005a4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <MX_TIM1_Init+0x118>)
 8000a2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a2c:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000a38:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a3a:	2259      	movs	r2, #89	; 0x59
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a52:	f002 fbaf 	bl	80031b4 <HAL_TIM_PWM_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a5c:	f000 f988 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a70:	4619      	mov	r1, r3
 8000a72:	4825      	ldr	r0, [pc, #148]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000a74:	f003 fd26 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 f977 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	; 0x60
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000aa8:	f002 fff6 	bl	8003a98 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ab2:	f000 f95d 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ace:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000aec:	f003 fd58 	bl	80045a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000af6:	f000 f93b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM1_Init+0x114>)
 8000afc:	f000 f9f0 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3758      	adds	r7, #88	; 0x58
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000084 	.word	0x20000084
 8000b0c:	40012c00 	.word	0x40012c00

08000b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2224      	movs	r2, #36	; 0x24
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 ff95 	bl	8005a4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b56:	2303      	movs	r3, #3
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000b66:	230a      	movs	r3, #10
 8000b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b82:	f002 fe55 	bl	8003830 <HAL_TIM_Encoder_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b8c:	f000 f8f0 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM2_Init+0xa4>)
 8000b9e:	f003 fc91 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ba8:	f000 f8e2 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000d0 	.word	0x200000d0

08000bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MX_USART2_UART_Init+0x5c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x58>)
 8000bfc:	f003 fd48 	bl	8004690 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c06:	f000 f8b3 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000164 	.word	0x20000164
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6493      	str	r3, [r2, #72]	; 0x48
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_DMA_Init+0x38>)
 8000c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f000 fc69 	bl	8001512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f000 fc82 	bl	800154a <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_GPIO_Init+0xe0>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f001 f85d 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MX_GPIO_Init+0xe4>)
 8000cee:	f000 febd 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 feb0 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f000 fea1 	bl	8001a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000800 	.word	0x48000800

08000d3c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  if (HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, TX_TIMEOUT_MS) != HAL_OK)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <_write+0x30>)
 8000d54:	f003 fcea 	bl	800472c <HAL_UART_Transmit>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <_write+0x26>
  {
    Error_Handler();
 8000d5e:	f000 f807 	bl	8000d70 <Error_Handler>
  }

  return len;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000164 	.word	0x20000164

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <HAL_TIM_PWM_MspInit+0x8c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d137      	bne.n	8000e46 <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_TIM_PWM_MspInit+0x90>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_TIM_PWM_MspInit+0x90>)
 8000ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de0:	6613      	str	r3, [r2, #96]	; 0x60
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_TIM_PWM_MspInit+0x90>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <HAL_TIM_PWM_MspInit+0x98>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e24:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e2c:	f000 fba8 	bl	8001580 <HAL_DMA_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8000e36:	f7ff ff9b 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e40:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <HAL_TIM_PWM_MspInit+0x94>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012c00 	.word	0x40012c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	2000011c 	.word	0x2000011c
 8000e5c:	4002001c 	.word	0x4002001c

08000e60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d128      	bne.n	8000ed4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 fdcc 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_TIM_MspPostInit+0x68>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11d      	bne.n	8000f3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_TIM_MspPostInit+0x6c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f000 fd97 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012c00 	.word	0x40012c00
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0a4      	sub	sp, #144	; 0x90
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2268      	movs	r2, #104	; 0x68
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f004 fd6c 	bl	8005a4e <memset>
  if(huart->Instance==USART2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <HAL_UART_MspInit+0xc0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d142      	bne.n	8001006 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fdb3 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f7ff feea 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	4a16      	ldr	r2, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0xc4>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f000 fd3b 	bl	8001a6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2026      	movs	r0, #38	; 0x26
 8000ffc:	f000 fa89 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001000:	2026      	movs	r0, #38	; 0x26
 8001002:	f000 faa2 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3790      	adds	r7, #144	; 0x90
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40004400 	.word	0x40004400
 8001014:	40021000 	.word	0x40021000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f936 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Channel2_IRQHandler+0x10>)
 8001072:	f000 fc1c 	bl	80018ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000011c 	.word	0x2000011c

08001080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <USART2_IRQHandler+0x10>)
 8001086:	f003 fbdb 	bl	8004840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000164 	.word	0x20000164

08001094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e00a      	b.n	80010bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a6:	f3af 8000 	nop.w
 80010aa:	4601      	mov	r1, r0
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60ba      	str	r2, [r7, #8]
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbf0      	blt.n	80010a6 <_read+0x12>
  }

  return len;
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f6:	605a      	str	r2, [r3, #4]
  return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_isatty>:

int _isatty(int file)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f004 fcc0 	bl	8005aec <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20028000 	.word	0x20028000
 8001198:	00000400 	.word	0x00000400
 800119c:	20000330 	.word	0x20000330
 80011a0:	20000488 	.word	0x20000488

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff ffea 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f004 fc7f 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff fac3 	bl	8000784 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001200:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800120c:	080067c4 	.word	0x080067c4
  ldr r2, =_sbss
 8001210:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001214:	20000484 	.word	0x20000484

08001218 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_IRQHandler>
	...

0800121c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_Init+0x3c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_Init+0x3c>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f962 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f80f 	bl	800125c <HAL_InitTick>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e001      	b.n	800124e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124a:	f7ff fd97 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124e:	79fb      	ldrb	r3, [r7, #7]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40022000 	.word	0x40022000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_InitTick+0x6c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_InitTick+0x70>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f96d 	bl	8001566 <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10f      	bne.n	80012b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d809      	bhi.n	80012ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f937 	bl	8001512 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_InitTick+0x74>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e007      	b.n	80012bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e001      	b.n	80012bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000004 	.word	0x20000004

080012d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x20>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x24>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_IncTick+0x24>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000334 	.word	0x20000334

080012fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <HAL_GetTick+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000334 	.word	0x20000334

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff ffee 	bl	80012fc <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffde 	bl	80012fc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e098      	b.n	80016c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <HAL_DMA_Init+0x150>)
 800159a:	429a      	cmp	r2, r3
 800159c:	d80f      	bhi.n	80015be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_DMA_Init+0x154>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_DMA_Init+0x158>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	009a      	lsls	r2, r3, #2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_DMA_Init+0x15c>)
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
 80015bc:	e00e      	b.n	80015dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b46      	ldr	r3, [pc, #280]	; (80016e0 <HAL_DMA_Init+0x160>)
 80015c6:	4413      	add	r3, r2
 80015c8:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <HAL_DMA_Init+0x158>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_DMA_Init+0x164>)
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001636:	d039      	beq.n	80016ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <HAL_DMA_Init+0x15c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d11a      	bne.n	8001678 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_DMA_Init+0x168>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 031c 	and.w	r3, r3, #28
 800164e:	210f      	movs	r1, #15
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_DMA_Init+0x168>)
 8001658:	4013      	ands	r3, r2
 800165a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_DMA_Init+0x168>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 031c 	and.w	r3, r3, #28
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	491d      	ldr	r1, [pc, #116]	; (80016e8 <HAL_DMA_Init+0x168>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
 8001676:	e019      	b.n	80016ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_DMA_Init+0x16c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 031c 	and.w	r3, r3, #28
 8001684:	210f      	movs	r1, #15
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	4917      	ldr	r1, [pc, #92]	; (80016ec <HAL_DMA_Init+0x16c>)
 800168e:	4013      	ands	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_DMA_Init+0x16c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 031c 	and.w	r3, r3, #28
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	4911      	ldr	r1, [pc, #68]	; (80016ec <HAL_DMA_Init+0x16c>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40020407 	.word	0x40020407
 80016d4:	bffdfff8 	.word	0xbffdfff8
 80016d8:	cccccccd 	.word	0xcccccccd
 80016dc:	40020000 	.word	0x40020000
 80016e0:	bffdfbf8 	.word	0xbffdfbf8
 80016e4:	40020400 	.word	0x40020400
 80016e8:	400200a8 	.word	0x400200a8
 80016ec:	400204a8 	.word	0x400204a8

080016f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Start_IT+0x20>
 800170c:	2302      	movs	r3, #2
 800170e:	e04b      	b.n	80017a8 <HAL_DMA_Start_IT+0xb8>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d13a      	bne.n	800179a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f95f 	bl	8001a0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 020e 	orr.w	r2, r2, #14
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e00f      	b.n	8001788 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 020a 	orr.w	r2, r2, #10
 8001786:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e005      	b.n	80017a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e022      	b.n	8001820 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f003 021c 	and.w	r2, r3, #28
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d005      	beq.n	8001850 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2204      	movs	r2, #4
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e029      	b.n	80018a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020e 	bic.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f003 021c 	and.w	r2, r3, #28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    }
  }
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f003 031c 	and.w	r3, r3, #28
 80018ce:	2204      	movs	r2, #4
 80018d0:	409a      	lsls	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d026      	beq.n	8001928 <HAL_DMA_IRQHandler+0x7a>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0204 	bic.w	r2, r2, #4
 8001900:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 021c 	and.w	r2, r3, #28
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	2104      	movs	r1, #4
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	2b00      	cmp	r3, #0
 800191c:	d071      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001926:	e06c      	b.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f003 031c 	and.w	r3, r3, #28
 8001930:	2202      	movs	r2, #2
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d02e      	beq.n	800199a <HAL_DMA_IRQHandler+0xec>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d029      	beq.n	800199a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020a 	bic.w	r2, r2, #10
 8001962:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f003 021c 	and.w	r2, r3, #28
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2102      	movs	r1, #2
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d038      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001998:	e033      	b.n	8001a02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 031c 	and.w	r3, r3, #28
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02a      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d025      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 020e 	bic.w	r2, r2, #14
 80019c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f003 021c 	and.w	r2, r3, #28
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
}
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 021c 	and.w	r2, r3, #28
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b10      	cmp	r3, #16
 8001a3c:	d108      	bne.n	8001a50 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a4e:	e007      	b.n	8001a60 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7a:	e154      	b.n	8001d26 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8146 	beq.w	8001d20 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d005      	beq.n	8001aac <HAL_GPIO_Init+0x40>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d130      	bne.n	8001b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 0201 	and.w	r2, r3, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d017      	beq.n	8001b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d123      	bne.n	8001b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80a0 	beq.w	8001d20 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <HAL_GPIO_Init+0x2d8>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be4:	4a57      	ldr	r2, [pc, #348]	; (8001d44 <HAL_GPIO_Init+0x2d8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6613      	str	r3, [r2, #96]	; 0x60
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HAL_GPIO_Init+0x2d8>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf8:	4a53      	ldr	r2, [pc, #332]	; (8001d48 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c22:	d019      	beq.n	8001c58 <HAL_GPIO_Init+0x1ec>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_GPIO_Init+0x2e0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_GPIO_Init+0x1e8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1e4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1e0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <HAL_GPIO_Init+0x2ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1dc>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e008      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c48:	2307      	movs	r3, #7
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c6a:	4937      	ldr	r1, [pc, #220]	; (8001d48 <HAL_GPIO_Init+0x2dc>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c78:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c9c:	4a2f      	ldr	r2, [pc, #188]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc6:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f47f aea3 	bne.w	8001a7c <HAL_GPIO_Init+0x10>
  }
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	48000400 	.word	0x48000400
 8001d50:	48000800 	.word	0x48000800
 8001d54:	48000c00 	.word	0x48000c00
 8001d58:	48001000 	.word	0x48001000
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40007000 	.word	0x40007000

08001ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dea:	d130      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d038      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e02:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2232      	movs	r2, #50	; 0x32
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e20:	e002      	b.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e34:	d102      	bne.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f2      	bne.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d110      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e00f      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5a:	d007      	beq.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83

08001e88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f000 bc02 	b.w	80026a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9c:	4b96      	ldr	r3, [pc, #600]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea6:	4b94      	ldr	r3, [pc, #592]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80e4 	beq.w	8002086 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4c>
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	f040 808b 	bne.w	8001fe2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	f040 8087 	bne.w	8001fe2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed4:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x64>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e3d9      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_RCC_OscConfig+0x7e>
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f04:	e005      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
 8001f06:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d223      	bcs.n	8001f5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fd8c 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e3ba      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2a:	4b73      	ldr	r3, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a72      	ldr	r2, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	496d      	ldr	r1, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f48:	4b6b      	ldr	r3, [pc, #428]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	4968      	ldr	r1, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e025      	b.n	8001faa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5e:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4960      	ldr	r1, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7c:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	495b      	ldr	r1, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fd4c 	bl	8002a38 <RCC_SetFlashLatencyFromMSIRange>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e37a      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001faa:	f000 fc81 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4950      	ldr	r1, [pc, #320]	; (80020fc <HAL_RCC_OscConfig+0x274>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a4e      	ldr	r2, [pc, #312]	; (8002100 <HAL_RCC_OscConfig+0x278>)
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f944 	bl	800125c <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d052      	beq.n	8002084 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	e35e      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d032      	beq.n	8002050 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff f981 	bl	80012fc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffe:	f7ff f97d 	bl	80012fc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e347      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a35      	ldr	r2, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4930      	ldr	r1, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	492b      	ldr	r1, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
 800204e:	e01a      	b.n	8002086 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205c:	f7ff f94e 	bl	80012fc <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002064:	f7ff f94a 	bl	80012fc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e314      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x1dc>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d073      	beq.n	800217a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x21c>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d10e      	bne.n	80020bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d10b      	bne.n	80020bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d063      	beq.n	8002178 <HAL_RCC_OscConfig+0x2f0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d15f      	bne.n	8002178 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e2f1      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c4:	d106      	bne.n	80020d4 <HAL_RCC_OscConfig+0x24c>
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e025      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d114      	bne.n	8002108 <HAL_RCC_OscConfig+0x280>
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <HAL_RCC_OscConfig+0x270>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x298>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08006738 	.word	0x08006738
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004
 8002108:	4ba0      	ldr	r3, [pc, #640]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a9f      	ldr	r2, [pc, #636]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b9d      	ldr	r3, [pc, #628]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a9c      	ldr	r2, [pc, #624]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f8e8 	bl	80012fc <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f8e4 	bl	80012fc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e2ae      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x2a8>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f8d4 	bl	80012fc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff f8d0 	bl	80012fc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e29a      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x2d0>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d060      	beq.n	8002248 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x310>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d119      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d116      	bne.n	80021c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x328>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e277      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	e040      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f88f 	bl	80012fc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff f88b 	bl	80012fc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e255      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	495f      	ldr	r1, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff f86b 	bl	80012fc <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff f867 	bl	80012fc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e231      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d03c      	beq.n	80022ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01c      	beq.n	8002296 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225c:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800225e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff f846 	bl	80012fc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff f842 	bl	80012fc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e20c      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCC_OscConfig+0x3ec>
 8002294:	e01b      	b.n	80022ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff f829 	bl	80012fc <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f825 	bl	80012fc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1ef      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80a6 	beq.w	8002428 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x504>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d118      	bne.n	8002346 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002320:	f7fe ffec 	bl	80012fc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe ffe8 	bl	80012fc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1b2      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x508>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <HAL_RCC_OscConfig+0x4d8>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235e:	e029      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x50c>
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_RCC_OscConfig+0x504>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x504>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x52c>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	4b9a      	ldr	r3, [pc, #616]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a99      	ldr	r2, [pc, #612]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a95      	ldr	r2, [pc, #596]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe ff9e 	bl	80012fc <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe ff9a 	bl	80012fc <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e162      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ed      	beq.n	80023c4 <HAL_RCC_OscConfig+0x53c>
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe ff87 	bl	80012fc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe ff83 	bl	80012fc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e14b      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002408:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ed      	bne.n	80023f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002416:	7ffb      	ldrb	r3, [r7, #31]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	4b78      	ldr	r3, [pc, #480]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4a77      	ldr	r2, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03c      	beq.n	80024ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01c      	beq.n	8002476 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800243c:	4b70      	ldr	r3, [pc, #448]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800243e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002442:	4a6f      	ldr	r2, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe ff56 	bl	80012fc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002454:	f7fe ff52 	bl	80012fc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e11c      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002466:	4b66      	ldr	r3, [pc, #408]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ef      	beq.n	8002454 <HAL_RCC_OscConfig+0x5cc>
 8002474:	e01b      	b.n	80024ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002476:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247c:	4a60      	ldr	r2, [pc, #384]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002486:	f7fe ff39 	bl	80012fc <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800248e:	f7fe ff35 	bl	80012fc <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0ff      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024a0:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80024a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ef      	bne.n	800248e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80f3 	beq.w	800269e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	2b02      	cmp	r3, #2
 80024be:	f040 80c9 	bne.w	8002654 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c2:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d12c      	bne.n	8002530 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	3b01      	subs	r3, #1
 80024e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d123      	bne.n	8002530 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d11b      	bne.n	8002530 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d113      	bne.n	8002530 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	3b01      	subs	r3, #1
 8002516:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d109      	bne.n	8002530 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d06b      	beq.n	8002608 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d062      	beq.n	80025fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002536:	4b32      	ldr	r3, [pc, #200]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0ac      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800254c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002552:	f7fe fed3 	bl	80012fc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fecf 	bl	80012fc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e099      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x77c>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002588:	3a01      	subs	r2, #1
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	4311      	orrs	r1, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800259a:	0852      	lsrs	r2, r2, #1
 800259c:	3a01      	subs	r2, #1
 800259e:	0552      	lsls	r2, r2, #21
 80025a0:	4311      	orrs	r1, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0652      	lsls	r2, r2, #25
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b2:	06d2      	lsls	r2, r2, #27
 80025b4:	430a      	orrs	r2, r1
 80025b6:	4912      	ldr	r1, [pc, #72]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d4:	f7fe fe92 	bl	80012fc <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fe8e 	bl	80012fc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e058      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_RCC_OscConfig+0x778>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fa:	e050      	b.n	800269e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e04f      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
 8002600:	40021000 	.word	0x40021000
 8002604:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d144      	bne.n	800269e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800262c:	f7fe fe66 	bl	80012fc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fe62 	bl	80012fc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e02c      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x7ac>
 8002652:	e024      	b.n	800269e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d01f      	beq.n	800269a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fe49 	bl	80012fc <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fe45 	bl	80012fc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e00f      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	4905      	ldr	r1, [pc, #20]	; (80026a8 <HAL_RCC_OscConfig+0x820>)
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_OscConfig+0x824>)
 8002694:	4013      	ands	r3, r2
 8002696:	60cb      	str	r3, [r1, #12]
 8002698:	e001      	b.n	800269e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3720      	adds	r7, #32
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	feeefffc 	.word	0xfeeefffc

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0e7      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d910      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b72      	ldr	r3, [pc, #456]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4970      	ldr	r1, [pc, #448]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b6e      	ldr	r3, [pc, #440]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cf      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d010      	beq.n	8002722 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800270c:	429a      	cmp	r2, r3
 800270e:	d908      	bls.n	8002722 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4960      	ldr	r1, [pc, #384]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04c      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002736:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d121      	bne.n	8002786 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0a6      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e09a      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002766:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e08e      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e086      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4943      	ldr	r1, [pc, #268]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fdb0 	bl	80012fc <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fdac 	bl	80012fc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e06e      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d010      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d208      	bcs.n	80027f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	492b      	ldr	r1, [pc, #172]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d210      	bcs.n	8002826 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 0207 	bic.w	r2, r3, #7
 800280c:	4923      	ldr	r1, [pc, #140]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_ClockConfig+0x1ec>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e036      	b.n	8002894 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4918      	ldr	r1, [pc, #96]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4910      	ldr	r1, [pc, #64]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002864:	f000 f824 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
 8002880:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002882:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1fc>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fce7 	bl	800125c <HAL_InitTick>
 800288e:	4603      	mov	r3, r0
 8002890:	72fb      	strb	r3, [r7, #11]

  return status;
 8002892:	7afb      	ldrb	r3, [r7, #11]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08006738 	.word	0x08006738
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d121      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d11e      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028f0:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e005      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800290c:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10d      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d102      	bne.n	800292e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e004      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d101      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002936:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d134      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0xa6>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d003      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0xac>
 8002954:	e005      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002958:	617b      	str	r3, [r7, #20]
      break;
 800295a:	e005      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800295e:	617b      	str	r3, [r7, #20]
      break;
 8002960:	e002      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	617b      	str	r3, [r7, #20]
      break;
 8002966:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	fb03 f202 	mul.w	r2, r3, r2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	0e5b      	lsrs	r3, r3, #25
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	3301      	adds	r3, #1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029a8:	69bb      	ldr	r3, [r7, #24]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08006750 	.word	0x08006750
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4904      	ldr	r1, [pc, #16]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08006748 	.word	0x08006748

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a10:	f7ff ffda 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0adb      	lsrs	r3, r3, #11
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08006748 	.word	0x08006748

08002a38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a50:	f7ff f9b6 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 8002a54:	6178      	str	r0, [r7, #20]
 8002a56:	e014      	b.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	; 0x58
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a70:	f7ff f9a6 	bl	8001dc0 <HAL_PWREx_GetVoltageRange>
 8002a74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d10b      	bne.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d919      	bls.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2ba0      	cmp	r3, #160	; 0xa0
 8002a94:	d902      	bls.n	8002a9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a96:	2302      	movs	r3, #2
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e013      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e010      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d902      	bls.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e00a      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d102      	bne.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	e004      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b70      	cmp	r3, #112	; 0x70
 8002abe:	d101      	bne.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 0207 	bic.w	r2, r3, #7
 8002acc:	4909      	ldr	r1, [pc, #36]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40022000 	.word	0x40022000

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b04:	2300      	movs	r3, #0
 8002b06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d031      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b1c:	d01a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b22:	d814      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b2c:	d10f      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3a:	e00c      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fa44 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4c:	e003      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	74fb      	strb	r3, [r7, #19]
      break;
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	494e      	ldr	r1, [pc, #312]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b72:	e001      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 809e 	beq.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b3d      	ldr	r3, [pc, #244]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a39      	ldr	r2, [pc, #228]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb98 	bl	80012fc <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bce:	e009      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe fb94 	bl	80012fc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	74fb      	strb	r3, [r7, #19]
        break;
 8002be2:	e005      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002be4:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d15a      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01e      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d019      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3e:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb54 	bl	80012fc <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c56:	e00b      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe fb50 	bl	80012fc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d902      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c6e:	e006      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ec      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
 8002ca0:	e006      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb0:	7c7b      	ldrb	r3, [r7, #17]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b9e      	ldr	r3, [pc, #632]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a9d      	ldr	r2, [pc, #628]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cce:	4b98      	ldr	r3, [pc, #608]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 0203 	bic.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4994      	ldr	r1, [pc, #592]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf0:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 020c 	bic.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	498c      	ldr	r1, [pc, #560]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d12:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	4983      	ldr	r1, [pc, #524]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	497b      	ldr	r1, [pc, #492]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4972      	ldr	r1, [pc, #456]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d78:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	496a      	ldr	r1, [pc, #424]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	4961      	ldr	r1, [pc, #388]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dbc:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dca:	4959      	ldr	r1, [pc, #356]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	4950      	ldr	r1, [pc, #320]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	4948      	ldr	r1, [pc, #288]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e22:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e28:	f023 0203 	bic.w	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	493f      	ldr	r1, [pc, #252]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d028      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
 8002e70:	e011      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f8a4 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	491f      	ldr	r1, [pc, #124]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ecc:	60d3      	str	r3, [r2, #12]
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f875 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	4908      	ldr	r1, [pc, #32]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e014      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f843 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	4916      	ldr	r1, [pc, #88]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f820 	bl	8002fd0 <RCCEx_PLLSAI1_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fde:	4b74      	ldr	r3, [pc, #464]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fea:	4b71      	ldr	r3, [pc, #452]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d10d      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003002:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
       ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d047      	beq.n	80030a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	e044      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d018      	beq.n	8003056 <RCCEx_PLLSAI1_Config+0x86>
 8003024:	2b03      	cmp	r3, #3
 8003026:	d825      	bhi.n	8003074 <RCCEx_PLLSAI1_Config+0xa4>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <RCCEx_PLLSAI1_Config+0x62>
 800302c:	2b02      	cmp	r3, #2
 800302e:	d009      	beq.n	8003044 <RCCEx_PLLSAI1_Config+0x74>
 8003030:	e020      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11d      	bne.n	800307a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003042:	e01a      	b.n	800307a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003044:	4b5a      	ldr	r3, [pc, #360]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d116      	bne.n	800307e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003054:	e013      	b.n	800307e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003056:	4b56      	ldr	r3, [pc, #344]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003062:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003072:	e006      	b.n	8003082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e004      	b.n	8003084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003082:	bf00      	nop
    }

    if(status == HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10d      	bne.n	80030a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	430b      	orrs	r3, r1
 80030a0:	4943      	ldr	r1, [pc, #268]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d17c      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fe f920 	bl	80012fc <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030be:	e009      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c0:	f7fe f91c 	bl	80012fc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	73fb      	strb	r3, [r7, #15]
        break;
 80030d2:	e005      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ef      	bne.n	80030c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d15f      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d110      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	0211      	lsls	r1, r2, #8
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	06d2      	lsls	r2, r2, #27
 8003104:	430a      	orrs	r2, r1
 8003106:	492a      	ldr	r1, [pc, #168]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
 800310c:	e027      	b.n	800315e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d112      	bne.n	800313a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800311c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6892      	ldr	r2, [r2, #8]
 8003124:	0211      	lsls	r1, r2, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6912      	ldr	r2, [r2, #16]
 800312a:	0852      	lsrs	r2, r2, #1
 800312c:	3a01      	subs	r2, #1
 800312e:	0552      	lsls	r2, r2, #21
 8003130:	430a      	orrs	r2, r1
 8003132:	491f      	ldr	r1, [pc, #124]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	610b      	str	r3, [r1, #16]
 8003138:	e011      	b.n	800315e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003142:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	0211      	lsls	r1, r2, #8
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6952      	ldr	r2, [r2, #20]
 8003150:	0852      	lsrs	r2, r2, #1
 8003152:	3a01      	subs	r2, #1
 8003154:	0652      	lsls	r2, r2, #25
 8003156:	430a      	orrs	r2, r1
 8003158:	4915      	ldr	r1, [pc, #84]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003168:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe f8c7 	bl	80012fc <HAL_GetTick>
 800316e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003170:	e009      	b.n	8003186 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003172:	f7fe f8c3 	bl	80012fc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	73fb      	strb	r3, [r7, #15]
          break;
 8003184:	e005      	b.n	8003192 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ef      	beq.n	8003172 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e049      	b.n	800325a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fdf2 	bl	8000dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 fe54 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_TIM_PWM_Start_DMA+0x2c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e03c      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d109      	bne.n	80032aa <HAL_TIM_PWM_Start_DMA+0x46>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e02f      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0xa6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d109      	bne.n	80032c4 <HAL_TIM_PWM_Start_DMA+0x60>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e022      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0xa6>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d109      	bne.n	80032de <HAL_TIM_PWM_Start_DMA+0x7a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e015      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0xa6>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d109      	bne.n	80032f8 <HAL_TIM_PWM_Start_DMA+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e008      	b.n	800330a <HAL_TIM_PWM_Start_DMA+0xa6>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
 8003310:	e192      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e03c      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d109      	bne.n	8003346 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e02f      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d109      	bne.n	8003360 <HAL_TIM_PWM_Start_DMA+0xfc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e022      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b0c      	cmp	r3, #12
 8003364:	d109      	bne.n	800337a <HAL_TIM_PWM_Start_DMA+0x116>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e015      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x142>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start_DMA+0x130>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e008      	b.n	80033a6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d034      	beq.n	8003414 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_TIM_PWM_Start_DMA+0x152>
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e13e      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_TIM_PWM_Start_DMA+0x166>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c8:	e026      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start_DMA+0x176>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d8:	e01e      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start_DMA+0x186>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e8:	e016      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start_DMA+0x196>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033f8:	e00e      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d104      	bne.n	800340a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003408:	e006      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003412:	e001      	b.n	8003418 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e10f      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
  }

  switch (Channel)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	f200 80ae 	bhi.w	800357c <HAL_TIM_PWM_Start_DMA+0x318>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800345d 	.word	0x0800345d
 800342c:	0800357d 	.word	0x0800357d
 8003430:	0800357d 	.word	0x0800357d
 8003434:	0800357d 	.word	0x0800357d
 8003438:	080034a5 	.word	0x080034a5
 800343c:	0800357d 	.word	0x0800357d
 8003440:	0800357d 	.word	0x0800357d
 8003444:	0800357d 	.word	0x0800357d
 8003448:	080034ed 	.word	0x080034ed
 800344c:	0800357d 	.word	0x0800357d
 8003450:	0800357d 	.word	0x0800357d
 8003454:	0800357d 	.word	0x0800357d
 8003458:	08003535 	.word	0x08003535
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	4a77      	ldr	r2, [pc, #476]	; (8003640 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	4a76      	ldr	r2, [pc, #472]	; (8003644 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800346a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3334      	adds	r3, #52	; 0x34
 8003480:	461a      	mov	r2, r3
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	f7fe f934 	bl	80016f0 <HAL_DMA_Start_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0d2      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	60da      	str	r2, [r3, #12]
      break;
 80034a2:	e06e      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	4a65      	ldr	r2, [pc, #404]	; (8003640 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	4a64      	ldr	r2, [pc, #400]	; (8003644 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3338      	adds	r3, #56	; 0x38
 80034c8:	461a      	mov	r2, r3
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	f7fe f910 	bl	80016f0 <HAL_DMA_Start_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0ae      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e8:	60da      	str	r2, [r3, #12]
      break;
 80034ea:	e04a      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a53      	ldr	r2, [pc, #332]	; (8003640 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a51      	ldr	r2, [pc, #324]	; (8003648 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	333c      	adds	r3, #60	; 0x3c
 8003510:	461a      	mov	r2, r3
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	f7fe f8ec 	bl	80016f0 <HAL_DMA_Start_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e08a      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003530:	60da      	str	r2, [r3, #12]
      break;
 8003532:	e026      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4a41      	ldr	r2, [pc, #260]	; (8003640 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4a40      	ldr	r2, [pc, #256]	; (8003644 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8003542:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4a3f      	ldr	r2, [pc, #252]	; (8003648 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3340      	adds	r3, #64	; 0x40
 8003558:	461a      	mov	r2, r3
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	f7fe f8c8 	bl	80016f0 <HAL_DMA_Start_IT>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e066      	b.n	8003638 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003578:	60da      	str	r2, [r3, #12]
      break;
 800357a:	e002      	b.n	8003582 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
      break;
 8003580:	bf00      	nop
  }

  if (status == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d156      	bne.n	8003636 <HAL_TIM_PWM_Start_DMA+0x3d2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 ff71 	bl	8004478 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2c      	ldr	r2, [pc, #176]	; (800364c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_TIM_PWM_Start_DMA+0x350>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_PWM_Start_DMA+0x350>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a29      	ldr	r2, [pc, #164]	; (8003654 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_PWM_Start_DMA+0x354>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x356>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_TIM_PWM_Start_DMA+0x392>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d009      	beq.n	80035f6 <HAL_TIM_PWM_Start_DMA+0x392>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_TIM_PWM_Start_DMA+0x392>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d115      	bne.n	8003622 <HAL_TIM_PWM_Start_DMA+0x3be>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b06      	cmp	r3, #6
 8003606:	d015      	beq.n	8003634 <HAL_TIM_PWM_Start_DMA+0x3d0>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360e:	d011      	beq.n	8003634 <HAL_TIM_PWM_Start_DMA+0x3d0>
      {
        __HAL_TIM_ENABLE(htim);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003620:	e008      	b.n	8003634 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e000      	b.n	8003636 <HAL_TIM_PWM_Start_DMA+0x3d2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08003d8f 	.word	0x08003d8f
 8003644:	08003e37 	.word	0x08003e37
 8003648:	08003cfd 	.word	0x08003cfd
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40000400 	.word	0x40000400
 800365c:	00010007 	.word	0x00010007

08003660 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	d855      	bhi.n	8003720 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003674:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367a:	bf00      	nop
 800367c:	080036b1 	.word	0x080036b1
 8003680:	08003721 	.word	0x08003721
 8003684:	08003721 	.word	0x08003721
 8003688:	08003721 	.word	0x08003721
 800368c:	080036cd 	.word	0x080036cd
 8003690:	08003721 	.word	0x08003721
 8003694:	08003721 	.word	0x08003721
 8003698:	08003721 	.word	0x08003721
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	08003721 	.word	0x08003721
 80036a4:	08003721 	.word	0x08003721
 80036a8:	08003721 	.word	0x08003721
 80036ac:	08003705 	.word	0x08003705
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe f8b1 	bl	800182c <HAL_DMA_Abort_IT>
      break;
 80036ca:	e02c      	b.n	8003726 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe f8a3 	bl	800182c <HAL_DMA_Abort_IT>
      break;
 80036e6:	e01e      	b.n	8003726 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe f895 	bl	800182c <HAL_DMA_Abort_IT>
      break;
 8003702:	e010      	b.n	8003726 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003712:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe f887 	bl	800182c <HAL_DMA_Abort_IT>
      break;
 800371e:	e002      	b.n	8003726 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	bf00      	nop
  }

  if (status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d176      	bne.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fe9f 	bl	8004478 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a37      	ldr	r2, [pc, #220]	; (8003828 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a36      	ldr	r2, [pc, #216]	; (800382c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d017      	beq.n	8003792 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f241 1311 	movw	r3, #4369	; 0x1111
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	f240 4344 	movw	r3, #1092	; 0x444
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_TIM_PWM_Stop_DMA+0x132>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	f241 1311 	movw	r3, #4369	; 0x1111
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_TIM_PWM_Stop_DMA+0x162>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	f240 4344 	movw	r3, #1092	; 0x444
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_PWM_Stop_DMA+0x162>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Stop_DMA+0x172>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Stop_DMA+0x182>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	e01b      	b.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0x192>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003800:	e00b      	b.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b10      	cmp	r3, #16
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003810:	e003      	b.n	800381a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400

08003830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e097      	b.n	8003974 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd fb01 	bl	8000e60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003874:	f023 0307 	bic.w	r3, r3, #7
 8003878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fb0b 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	4313      	orrs	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038d0:	f023 030c 	bic.w	r3, r3, #12
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	4313      	orrs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	011a      	lsls	r2, r3, #4
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	031b      	lsls	r3, r3, #12
 8003900:	4313      	orrs	r3, r2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	4313      	orrs	r3, r2
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003994:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d110      	bne.n	80039ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d102      	bne.n	80039b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039b2:	7b7b      	ldrb	r3, [r7, #13]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e069      	b.n	8003a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039cc:	e031      	b.n	8003a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d110      	bne.n	80039f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039da:	7b3b      	ldrb	r3, [r7, #12]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e055      	b.n	8003a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f4:	e01d      	b.n	8003a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d108      	bne.n	8003a0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	7b7b      	ldrb	r3, [r7, #13]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a08:	7b3b      	ldrb	r3, [r7, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e03e      	b.n	8003a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_TIM_Encoder_Start+0xc4>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d008      	beq.n	8003a50 <HAL_TIM_Encoder_Start+0xd4>
 8003a3e:	e00f      	b.n	8003a60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd15 	bl	8004478 <TIM_CCxChannelCmd>
      break;
 8003a4e:	e016      	b.n	8003a7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	2104      	movs	r1, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fd0d 	bl	8004478 <TIM_CCxChannelCmd>
      break;
 8003a5e:	e00e      	b.n	8003a7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd05 	bl	8004478 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	2104      	movs	r1, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fcfe 	bl	8004478 <TIM_CCxChannelCmd>
      break;
 8003a7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0ff      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b14      	cmp	r3, #20
 8003ac2:	f200 80f0 	bhi.w	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003b21 	.word	0x08003b21
 8003ad0:	08003ca7 	.word	0x08003ca7
 8003ad4:	08003ca7 	.word	0x08003ca7
 8003ad8:	08003ca7 	.word	0x08003ca7
 8003adc:	08003b61 	.word	0x08003b61
 8003ae0:	08003ca7 	.word	0x08003ca7
 8003ae4:	08003ca7 	.word	0x08003ca7
 8003ae8:	08003ca7 	.word	0x08003ca7
 8003aec:	08003ba3 	.word	0x08003ba3
 8003af0:	08003ca7 	.word	0x08003ca7
 8003af4:	08003ca7 	.word	0x08003ca7
 8003af8:	08003ca7 	.word	0x08003ca7
 8003afc:	08003be3 	.word	0x08003be3
 8003b00:	08003ca7 	.word	0x08003ca7
 8003b04:	08003ca7 	.word	0x08003ca7
 8003b08:	08003ca7 	.word	0x08003ca7
 8003b0c:	08003c25 	.word	0x08003c25
 8003b10:	08003ca7 	.word	0x08003ca7
 8003b14:	08003ca7 	.word	0x08003ca7
 8003b18:	08003ca7 	.word	0x08003ca7
 8003b1c:	08003c65 	.word	0x08003c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fa28 	bl	8003f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0208 	orr.w	r2, r2, #8
 8003b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6999      	ldr	r1, [r3, #24]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	619a      	str	r2, [r3, #24]
      break;
 8003b5e:	e0a5      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fa84 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6999      	ldr	r1, [r3, #24]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	619a      	str	r2, [r3, #24]
      break;
 8003ba0:	e084      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fadd 	bl	8004168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0208 	orr.w	r2, r2, #8
 8003bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0204 	bic.w	r2, r2, #4
 8003bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69d9      	ldr	r1, [r3, #28]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	61da      	str	r2, [r3, #28]
      break;
 8003be0:	e064      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fb35 	bl	8004258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	61da      	str	r2, [r3, #28]
      break;
 8003c22:	e043      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb72 	bl	8004314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c62:	e023      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fbaa 	bl	80043c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ca4:	e002      	b.n	8003cac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8003caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop

08003cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d22:	e02a      	b.n	8003d7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d107      	bne.n	8003d3e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3c:	e01d      	b.n	8003d7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d107      	bne.n	8003d58 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d56:	e010      	b.n	8003d7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d107      	bne.n	8003d72 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d70:	e003      	b.n	8003d7a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ffb4 	bl	8003ce8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	771a      	strb	r2, [r3, #28]
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10b      	bne.n	8003dbe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d136      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	e031      	b.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d10b      	bne.n	8003de0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d125      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dde:	e020      	b.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10b      	bne.n	8003e02 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2204      	movs	r2, #4
 8003dee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d114      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e00:	e00f      	b.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10a      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ff4c 	bl	8003cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	771a      	strb	r2, [r3, #28]
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d103      	bne.n	8003e56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	771a      	strb	r2, [r3, #28]
 8003e54:	e019      	b.n	8003e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2202      	movs	r2, #2
 8003e64:	771a      	strb	r2, [r3, #28]
 8003e66:	e010      	b.n	8003e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d103      	bne.n	8003e7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2204      	movs	r2, #4
 8003e76:	771a      	strb	r2, [r3, #28]
 8003e78:	e007      	b.n	8003e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d102      	bne.n	8003e8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2208      	movs	r2, #8
 8003e88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff22 	bl	8003cd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	771a      	strb	r2, [r3, #28]
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <TIM_Base_SetConfig+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x28>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x28>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	; (8003f70 <TIM_Base_SetConfig+0xd0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <TIM_Base_SetConfig+0xcc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d00b      	beq.n	8003f02 <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <TIM_Base_SetConfig+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <TIM_Base_SetConfig+0xd4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_Base_SetConfig+0x62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <TIM_Base_SetConfig+0xd8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d108      	bne.n	8003f14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0c      	ldr	r2, [pc, #48]	; (8003f6c <TIM_Base_SetConfig+0xcc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0xb0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <TIM_Base_SetConfig+0xd4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0xb0>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <TIM_Base_SetConfig+0xd8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400

08003f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0201 	bic.w	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 0302 	bic.w	r3, r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <TIM_OC1_SetConfig+0xec>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_OC1_SetConfig+0x70>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a23      	ldr	r2, [pc, #140]	; (800406c <TIM_OC1_SetConfig+0xf0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_OC1_SetConfig+0x70>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a22      	ldr	r2, [pc, #136]	; (8004070 <TIM_OC1_SetConfig+0xf4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10c      	bne.n	8004006 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0308 	bic.w	r3, r3, #8
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a17      	ldr	r2, [pc, #92]	; (8004068 <TIM_OC1_SetConfig+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_OC1_SetConfig+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <TIM_OC1_SetConfig+0xf0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_OC1_SetConfig+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <TIM_OC1_SetConfig+0xf4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a22      	ldr	r2, [pc, #136]	; (800415c <TIM_OC2_SetConfig+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10d      	bne.n	80040f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a19      	ldr	r2, [pc, #100]	; (800415c <TIM_OC2_SetConfig+0xe8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_OC2_SetConfig+0x98>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <TIM_OC2_SetConfig+0xec>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC2_SetConfig+0x98>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_OC2_SetConfig+0xf0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d113      	bne.n	8004134 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400

08004168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <TIM_OC3_SetConfig+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10d      	bne.n	80041e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <TIM_OC3_SetConfig+0xe4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC3_SetConfig+0x96>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <TIM_OC3_SetConfig+0xe8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x96>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <TIM_OC3_SetConfig+0xec>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400

08004258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <TIM_OC4_SetConfig+0xb0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_OC4_SetConfig+0x74>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <TIM_OC4_SetConfig+0xb4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC4_SetConfig+0x74>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a12      	ldr	r2, [pc, #72]	; (8004310 <TIM_OC4_SetConfig+0xb8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	019b      	lsls	r3, r3, #6
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400

08004314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <TIM_OC5_SetConfig+0xa4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_OC5_SetConfig+0x6a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a12      	ldr	r2, [pc, #72]	; (80043bc <TIM_OC5_SetConfig+0xa8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_OC5_SetConfig+0x6a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <TIM_OC5_SetConfig+0xac>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d109      	bne.n	8004392 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400

080043c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800440a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a14      	ldr	r2, [pc, #80]	; (800446c <TIM_OC6_SetConfig+0xa8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_OC6_SetConfig+0x6c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <TIM_OC6_SetConfig+0xac>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_OC6_SetConfig+0x6c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <TIM_OC6_SetConfig+0xb0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d109      	bne.n	8004444 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004436:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	029b      	lsls	r3, r3, #10
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400

08004478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e054      	b.n	8004586 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800450c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d009      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a11      	ldr	r2, [pc, #68]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10c      	bne.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40000400 	.word	0x40000400
 800459c:	40014000 	.word	0x40014000

080045a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e060      	b.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a14      	ldr	r2, [pc, #80]	; (800468c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d115      	bne.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	051b      	lsls	r3, r3, #20
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00

08004690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e040      	b.n	8004724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fc fc4c 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	; 0x24
 80046bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fe42 	bl	8005360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbb9 	bl	8004e54 <UART_SetConfig>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e01b      	b.n	8004724 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fec1 	bl	80054a4 <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004740:	2b20      	cmp	r3, #32
 8004742:	d178      	bne.n	8004836 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Transmit+0x24>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e071      	b.n	8004838 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fc fdcb 	bl	80012fc <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d108      	bne.n	8004794 <HAL_UART_Transmit+0x68>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e003      	b.n	800479c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800479c:	e030      	b.n	8004800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2180      	movs	r1, #128	; 0x80
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 ff23 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e03c      	b.n	8004838 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	b292      	uxth	r2, r2
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3302      	adds	r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e008      	b.n	80047ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	b292      	uxth	r2, r2
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1c8      	bne.n	800479e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2200      	movs	r2, #0
 8004814:	2140      	movs	r1, #64	; 0x40
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 feec 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e005      	b.n	8004838 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b0ba      	sub	sp, #232	; 0xe8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800486a:	f640 030f 	movw	r3, #2063	; 0x80f
 800486e:	4013      	ands	r3, r2
 8004870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d115      	bne.n	80048a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 82ae 	beq.w	8004dfa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
      }
      return;
 80048a6:	e2a8      	b.n	8004dfa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80048a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8117 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048c2:	4b85      	ldr	r3, [pc, #532]	; (8004ad8 <HAL_UART_IRQHandler+0x298>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 810a 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d011      	beq.n	80048fc <HAL_UART_IRQHandler+0xbc>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2201      	movs	r2, #1
 80048ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_UART_IRQHandler+0xec>
 8004908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2202      	movs	r2, #2
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d011      	beq.n	800495c <HAL_UART_IRQHandler+0x11c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2204      	movs	r2, #4
 800494a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004978:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498e:	f043 0208 	orr.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_UART_IRQHandler+0x18a>
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00c      	beq.n	80049ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8214 	beq.w	8004dfe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04f      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fe4d 	bl	80056c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d141      	bne.n	8004aba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1d9      	bne.n	8004a36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d013      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <HAL_UART_IRQHandler+0x29c>)
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc fec8 	bl	800182c <HAL_DMA_Abort_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d017      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aac:	4610      	mov	r0, r2
 8004aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	e00f      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9b8 	bl	8004e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e00b      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9b4 	bl	8004e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	e007      	b.n	8004ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9b0 	bl	8004e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004ad0:	e195      	b.n	8004dfe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad2:	bf00      	nop
    return;
 8004ad4:	e193      	b.n	8004dfe <HAL_UART_IRQHandler+0x5be>
 8004ad6:	bf00      	nop
 8004ad8:	04000120 	.word	0x04000120
 8004adc:	0800578b 	.word	0x0800578b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 814e 	bne.w	8004d86 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8147 	beq.w	8004d86 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8140 	beq.w	8004d86 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	f040 80b8 	bne.w	8004c8e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8167 	beq.w	8004e02 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	f080 815f 	bcs.w	8004e02 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8086 	bne.w	8004c6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1da      	bne.n	8004b60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e1      	bne.n	8004baa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3c:	f023 0310 	bic.w	r3, r3, #16
 8004c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e4      	bne.n	8004c2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fc fda2 	bl	80017b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8d8 	bl	8004e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c8c:	e0b9      	b.n	8004e02 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80ab 	beq.w	8004e06 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80a6 	beq.w	8004e06 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e4      	bne.n	8004cba <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d14:	633a      	str	r2, [r7, #48]	; 0x30
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e3      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f023 0310 	bic.w	r3, r3, #16
 8004d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e4      	bne.n	8004d3c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f85c 	bl	8004e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d84:	e03f      	b.n	8004e06 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00e      	beq.n	8004db0 <HAL_UART_IRQHandler+0x570>
 8004d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd2e 	bl	800580a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dae:	e02d      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01c      	beq.n	8004e0a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
    }
    return;
 8004dd8:	e017      	b.n	8004e0a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
 8004de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fcdf 	bl	80057b6 <UART_EndTransmit_IT>
    return;
 8004df8:	e008      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004dfa:	bf00      	nop
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8004dfe:	bf00      	nop
 8004e00:	e004      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8004e0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e0c:	37e8      	adds	r7, #232	; 0xe8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop

08004e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e58:	b08a      	sub	sp, #40	; 0x28
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4ba5      	ldr	r3, [pc, #660]	; (8005118 <UART_SetConfig+0x2c4>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a9a      	ldr	r2, [pc, #616]	; (800511c <UART_SetConfig+0x2c8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a91      	ldr	r2, [pc, #580]	; (8005120 <UART_SetConfig+0x2cc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d126      	bne.n	8004f2c <UART_SetConfig+0xd8>
 8004ede:	4b91      	ldr	r3, [pc, #580]	; (8005124 <UART_SetConfig+0x2d0>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d81b      	bhi.n	8004f24 <UART_SetConfig+0xd0>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0xa0>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f15 	.word	0x08004f15
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e0d6      	b.n	80050ba <UART_SetConfig+0x266>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e0d2      	b.n	80050ba <UART_SetConfig+0x266>
 8004f14:	2304      	movs	r3, #4
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1a:	e0ce      	b.n	80050ba <UART_SetConfig+0x266>
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f22:	e0ca      	b.n	80050ba <UART_SetConfig+0x266>
 8004f24:	2310      	movs	r3, #16
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2a:	e0c6      	b.n	80050ba <UART_SetConfig+0x266>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a7d      	ldr	r2, [pc, #500]	; (8005128 <UART_SetConfig+0x2d4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d138      	bne.n	8004fa8 <UART_SetConfig+0x154>
 8004f36:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <UART_SetConfig+0x2d0>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d82d      	bhi.n	8004fa0 <UART_SetConfig+0x14c>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0xf8>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004fa1 	.word	0x08004fa1
 8004f54:	08004fa1 	.word	0x08004fa1
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004f89 	.word	0x08004f89
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e098      	b.n	80050ba <UART_SetConfig+0x266>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e094      	b.n	80050ba <UART_SetConfig+0x266>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e090      	b.n	80050ba <UART_SetConfig+0x266>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9e:	e08c      	b.n	80050ba <UART_SetConfig+0x266>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa6:	e088      	b.n	80050ba <UART_SetConfig+0x266>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a5f      	ldr	r2, [pc, #380]	; (800512c <UART_SetConfig+0x2d8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d125      	bne.n	8004ffe <UART_SetConfig+0x1aa>
 8004fb2:	4b5c      	ldr	r3, [pc, #368]	; (8005124 <UART_SetConfig+0x2d0>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d016      	beq.n	8004fee <UART_SetConfig+0x19a>
 8004fc0:	2b30      	cmp	r3, #48	; 0x30
 8004fc2:	d818      	bhi.n	8004ff6 <UART_SetConfig+0x1a2>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d00a      	beq.n	8004fde <UART_SetConfig+0x18a>
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d814      	bhi.n	8004ff6 <UART_SetConfig+0x1a2>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <UART_SetConfig+0x182>
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d008      	beq.n	8004fe6 <UART_SetConfig+0x192>
 8004fd4:	e00f      	b.n	8004ff6 <UART_SetConfig+0x1a2>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fdc:	e06d      	b.n	80050ba <UART_SetConfig+0x266>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe4:	e069      	b.n	80050ba <UART_SetConfig+0x266>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fec:	e065      	b.n	80050ba <UART_SetConfig+0x266>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff4:	e061      	b.n	80050ba <UART_SetConfig+0x266>
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffc:	e05d      	b.n	80050ba <UART_SetConfig+0x266>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a4b      	ldr	r2, [pc, #300]	; (8005130 <UART_SetConfig+0x2dc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d125      	bne.n	8005054 <UART_SetConfig+0x200>
 8005008:	4b46      	ldr	r3, [pc, #280]	; (8005124 <UART_SetConfig+0x2d0>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005012:	2bc0      	cmp	r3, #192	; 0xc0
 8005014:	d016      	beq.n	8005044 <UART_SetConfig+0x1f0>
 8005016:	2bc0      	cmp	r3, #192	; 0xc0
 8005018:	d818      	bhi.n	800504c <UART_SetConfig+0x1f8>
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	d00a      	beq.n	8005034 <UART_SetConfig+0x1e0>
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d814      	bhi.n	800504c <UART_SetConfig+0x1f8>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <UART_SetConfig+0x1d8>
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d008      	beq.n	800503c <UART_SetConfig+0x1e8>
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x1f8>
 800502c:	2300      	movs	r3, #0
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e042      	b.n	80050ba <UART_SetConfig+0x266>
 8005034:	2302      	movs	r3, #2
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e03e      	b.n	80050ba <UART_SetConfig+0x266>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e03a      	b.n	80050ba <UART_SetConfig+0x266>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e036      	b.n	80050ba <UART_SetConfig+0x266>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e032      	b.n	80050ba <UART_SetConfig+0x266>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a30      	ldr	r2, [pc, #192]	; (800511c <UART_SetConfig+0x2c8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d12a      	bne.n	80050b4 <UART_SetConfig+0x260>
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <UART_SetConfig+0x2d0>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800506c:	d01a      	beq.n	80050a4 <UART_SetConfig+0x250>
 800506e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005072:	d81b      	bhi.n	80050ac <UART_SetConfig+0x258>
 8005074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005078:	d00c      	beq.n	8005094 <UART_SetConfig+0x240>
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507e:	d815      	bhi.n	80050ac <UART_SetConfig+0x258>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <UART_SetConfig+0x238>
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005088:	d008      	beq.n	800509c <UART_SetConfig+0x248>
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x258>
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e012      	b.n	80050ba <UART_SetConfig+0x266>
 8005094:	2302      	movs	r3, #2
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e00e      	b.n	80050ba <UART_SetConfig+0x266>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e00a      	b.n	80050ba <UART_SetConfig+0x266>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e006      	b.n	80050ba <UART_SetConfig+0x266>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e002      	b.n	80050ba <UART_SetConfig+0x266>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <UART_SetConfig+0x2c8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	f040 808b 	bne.w	80051dc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d834      	bhi.n	8005138 <UART_SetConfig+0x2e4>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0x280>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	08005139 	.word	0x08005139
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005139 	.word	0x08005139
 80050e4:	08005107 	.word	0x08005107
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005139 	.word	0x08005139
 80050f0:	08005139 	.word	0x08005139
 80050f4:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fd fc72 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 80050fc:	61f8      	str	r0, [r7, #28]
        break;
 80050fe:	e021      	b.n	8005144 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <UART_SetConfig+0x2e0>)
 8005102:	61fb      	str	r3, [r7, #28]
        break;
 8005104:	e01e      	b.n	8005144 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fd fbd3 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800510a:	61f8      	str	r0, [r7, #28]
        break;
 800510c:	e01a      	b.n	8005144 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61fb      	str	r3, [r7, #28]
        break;
 8005114:	e016      	b.n	8005144 <UART_SetConfig+0x2f0>
 8005116:	bf00      	nop
 8005118:	efff69f3 	.word	0xefff69f3
 800511c:	40008000 	.word	0x40008000
 8005120:	40013800 	.word	0x40013800
 8005124:	40021000 	.word	0x40021000
 8005128:	40004400 	.word	0x40004400
 800512c:	40004800 	.word	0x40004800
 8005130:	40004c00 	.word	0x40004c00
 8005134:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005142:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80fa 	beq.w	8005340 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d305      	bcc.n	8005168 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	429a      	cmp	r2, r3
 8005166:	d903      	bls.n	8005170 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800516e:	e0e7      	b.n	8005340 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2200      	movs	r2, #0
 8005174:	461c      	mov	r4, r3
 8005176:	4615      	mov	r5, r2
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	022b      	lsls	r3, r5, #8
 8005182:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005186:	0222      	lsls	r2, r4, #8
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	6849      	ldr	r1, [r1, #4]
 800518c:	0849      	lsrs	r1, r1, #1
 800518e:	2000      	movs	r0, #0
 8005190:	4688      	mov	r8, r1
 8005192:	4681      	mov	r9, r0
 8005194:	eb12 0a08 	adds.w	sl, r2, r8
 8005198:	eb43 0b09 	adc.w	fp, r3, r9
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051aa:	4650      	mov	r0, sl
 80051ac:	4659      	mov	r1, fp
 80051ae:	f7fb f867 	bl	8000280 <__aeabi_uldivmod>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4613      	mov	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c0:	d308      	bcc.n	80051d4 <UART_SetConfig+0x380>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c8:	d204      	bcs.n	80051d4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e0b5      	b.n	8005340 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051da:	e0b1      	b.n	8005340 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e4:	d15d      	bne.n	80052a2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80051e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d827      	bhi.n	800523e <UART_SetConfig+0x3ea>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x3a0>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005229 	.word	0x08005229
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fd fbe2 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 800521c:	61f8      	str	r0, [r7, #28]
        break;
 800521e:	e014      	b.n	800524a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fd fbf4 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8005224:	61f8      	str	r0, [r7, #28]
        break;
 8005226:	e010      	b.n	800524a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b4c      	ldr	r3, [pc, #304]	; (800535c <UART_SetConfig+0x508>)
 800522a:	61fb      	str	r3, [r7, #28]
        break;
 800522c:	e00d      	b.n	800524a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fd fb3f 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8005232:	61f8      	str	r0, [r7, #28]
        break;
 8005234:	e009      	b.n	800524a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	61fb      	str	r3, [r7, #28]
        break;
 800523c:	e005      	b.n	800524a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d077      	beq.n	8005340 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	005a      	lsls	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	441a      	add	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0f      	cmp	r3, #15
 800526a:	d916      	bls.n	800529a <UART_SetConfig+0x446>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d212      	bcs.n	800529a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	b29a      	uxth	r2, r3
 800528a:	8afb      	ldrh	r3, [r7, #22]
 800528c:	4313      	orrs	r3, r2
 800528e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	8afa      	ldrh	r2, [r7, #22]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e052      	b.n	8005340 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052a0:	e04e      	b.n	8005340 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d827      	bhi.n	80052fa <UART_SetConfig+0x4a6>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x45c>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052d5 	.word	0x080052d5
 80052b4:	080052dd 	.word	0x080052dd
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	080052fb 	.word	0x080052fb
 80052c0:	080052eb 	.word	0x080052eb
 80052c4:	080052fb 	.word	0x080052fb
 80052c8:	080052fb 	.word	0x080052fb
 80052cc:	080052fb 	.word	0x080052fb
 80052d0:	080052f3 	.word	0x080052f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d4:	f7fd fb84 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 80052d8:	61f8      	str	r0, [r7, #28]
        break;
 80052da:	e014      	b.n	8005306 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fd fb96 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 80052e0:	61f8      	str	r0, [r7, #28]
        break;
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <UART_SetConfig+0x508>)
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e00d      	b.n	8005306 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fd fae1 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 80052ee:	61f8      	str	r0, [r7, #28]
        break;
 80052f0:	e009      	b.n	8005306 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	61fb      	str	r3, [r7, #28]
        break;
 80052f8:	e005      	b.n	8005306 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005304:	bf00      	nop
    }

    if (pclk != 0U)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d019      	beq.n	8005340 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	085a      	lsrs	r2, r3, #1
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	d909      	bls.n	800533a <UART_SetConfig+0x4e6>
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d205      	bcs.n	800533a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
 8005338:	e002      	b.n	8005340 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800534c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005350:	4618      	mov	r0, r3
 8005352:	3728      	adds	r7, #40	; 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535a:	bf00      	nop
 800535c:	00f42400 	.word	0x00f42400

08005360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01a      	beq.n	8005476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545e:	d10a      	bne.n	8005476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	605a      	str	r2, [r3, #4]
  }
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b098      	sub	sp, #96	; 0x60
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b4:	f7fb ff22 	bl	80012fc <HAL_GetTick>
 80054b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d12e      	bne.n	8005526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f88c 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d021      	beq.n	8005526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
 8005502:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e6      	bne.n	80054e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e062      	b.n	80055ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d149      	bne.n	80055c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f856 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d03c      	beq.n	80055c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	623b      	str	r3, [r7, #32]
   return(result);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
 800556e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	64bb      	str	r3, [r7, #72]	; 0x48
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3308      	adds	r3, #8
 800559e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055a0:	61fa      	str	r2, [r7, #28]
 80055a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	617b      	str	r3, [r7, #20]
   return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e5      	bne.n	8005580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e011      	b.n	80055ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3758      	adds	r7, #88	; 0x58
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005604:	e049      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d045      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fb fe75 	bl	80012fc <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x30>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e048      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d031      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d110      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2208      	movs	r2, #8
 800564a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f838 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2208      	movs	r2, #8
 8005656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e029      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005674:	d111      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f81e 	bl	80056c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d0a6      	beq.n	8005606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b095      	sub	sp, #84	; 0x54
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800571c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005734:	2b01      	cmp	r3, #1
 8005736:	d118      	bne.n	800576a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	60bb      	str	r3, [r7, #8]
   return(result);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	613b      	str	r3, [r7, #16]
   return(result);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800577e:	bf00      	nop
 8005780:	3754      	adds	r7, #84	; 0x54
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fb3d 	bl	8004e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b088      	sub	sp, #32
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fb09 	bl	8004e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005802:	bf00      	nop
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <std>:
 8005820:	2300      	movs	r3, #0
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	e9c0 3300 	strd	r3, r3, [r0]
 800582a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800582e:	6083      	str	r3, [r0, #8]
 8005830:	8181      	strh	r1, [r0, #12]
 8005832:	6643      	str	r3, [r0, #100]	; 0x64
 8005834:	81c2      	strh	r2, [r0, #14]
 8005836:	6183      	str	r3, [r0, #24]
 8005838:	4619      	mov	r1, r3
 800583a:	2208      	movs	r2, #8
 800583c:	305c      	adds	r0, #92	; 0x5c
 800583e:	f000 f906 	bl	8005a4e <memset>
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <std+0x58>)
 8005844:	6263      	str	r3, [r4, #36]	; 0x24
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <std+0x5c>)
 8005848:	62a3      	str	r3, [r4, #40]	; 0x28
 800584a:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <std+0x60>)
 800584c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800584e:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <std+0x64>)
 8005850:	6323      	str	r3, [r4, #48]	; 0x30
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <std+0x68>)
 8005854:	6224      	str	r4, [r4, #32]
 8005856:	429c      	cmp	r4, r3
 8005858:	d006      	beq.n	8005868 <std+0x48>
 800585a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800585e:	4294      	cmp	r4, r2
 8005860:	d002      	beq.n	8005868 <std+0x48>
 8005862:	33d0      	adds	r3, #208	; 0xd0
 8005864:	429c      	cmp	r4, r3
 8005866:	d105      	bne.n	8005874 <std+0x54>
 8005868:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f000 b966 	b.w	8005b40 <__retarget_lock_init_recursive>
 8005874:	bd10      	pop	{r4, pc}
 8005876:	bf00      	nop
 8005878:	080059c9 	.word	0x080059c9
 800587c:	080059eb 	.word	0x080059eb
 8005880:	08005a23 	.word	0x08005a23
 8005884:	08005a47 	.word	0x08005a47
 8005888:	20000338 	.word	0x20000338

0800588c <stdio_exit_handler>:
 800588c:	4a02      	ldr	r2, [pc, #8]	; (8005898 <stdio_exit_handler+0xc>)
 800588e:	4903      	ldr	r1, [pc, #12]	; (800589c <stdio_exit_handler+0x10>)
 8005890:	4803      	ldr	r0, [pc, #12]	; (80058a0 <stdio_exit_handler+0x14>)
 8005892:	f000 b869 	b.w	8005968 <_fwalk_sglue>
 8005896:	bf00      	nop
 8005898:	2000000c 	.word	0x2000000c
 800589c:	080063ed 	.word	0x080063ed
 80058a0:	20000018 	.word	0x20000018

080058a4 <cleanup_stdio>:
 80058a4:	6841      	ldr	r1, [r0, #4]
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <cleanup_stdio+0x34>)
 80058a8:	4299      	cmp	r1, r3
 80058aa:	b510      	push	{r4, lr}
 80058ac:	4604      	mov	r4, r0
 80058ae:	d001      	beq.n	80058b4 <cleanup_stdio+0x10>
 80058b0:	f000 fd9c 	bl	80063ec <_fflush_r>
 80058b4:	68a1      	ldr	r1, [r4, #8]
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <cleanup_stdio+0x38>)
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <cleanup_stdio+0x1e>
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fd95 	bl	80063ec <_fflush_r>
 80058c2:	68e1      	ldr	r1, [r4, #12]
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <cleanup_stdio+0x3c>)
 80058c6:	4299      	cmp	r1, r3
 80058c8:	d004      	beq.n	80058d4 <cleanup_stdio+0x30>
 80058ca:	4620      	mov	r0, r4
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f000 bd8c 	b.w	80063ec <_fflush_r>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	20000338 	.word	0x20000338
 80058dc:	200003a0 	.word	0x200003a0
 80058e0:	20000408 	.word	0x20000408

080058e4 <global_stdio_init.part.0>:
 80058e4:	b510      	push	{r4, lr}
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <global_stdio_init.part.0+0x30>)
 80058e8:	4c0b      	ldr	r4, [pc, #44]	; (8005918 <global_stdio_init.part.0+0x34>)
 80058ea:	4a0c      	ldr	r2, [pc, #48]	; (800591c <global_stdio_init.part.0+0x38>)
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	4620      	mov	r0, r4
 80058f0:	2200      	movs	r2, #0
 80058f2:	2104      	movs	r1, #4
 80058f4:	f7ff ff94 	bl	8005820 <std>
 80058f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058fc:	2201      	movs	r2, #1
 80058fe:	2109      	movs	r1, #9
 8005900:	f7ff ff8e 	bl	8005820 <std>
 8005904:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005908:	2202      	movs	r2, #2
 800590a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590e:	2112      	movs	r1, #18
 8005910:	f7ff bf86 	b.w	8005820 <std>
 8005914:	20000470 	.word	0x20000470
 8005918:	20000338 	.word	0x20000338
 800591c:	0800588d 	.word	0x0800588d

08005920 <__sfp_lock_acquire>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__sfp_lock_acquire+0x8>)
 8005922:	f000 b90e 	b.w	8005b42 <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	20000479 	.word	0x20000479

0800592c <__sfp_lock_release>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__sfp_lock_release+0x8>)
 800592e:	f000 b909 	b.w	8005b44 <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	20000479 	.word	0x20000479

08005938 <__sinit>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4604      	mov	r4, r0
 800593c:	f7ff fff0 	bl	8005920 <__sfp_lock_acquire>
 8005940:	6a23      	ldr	r3, [r4, #32]
 8005942:	b11b      	cbz	r3, 800594c <__sinit+0x14>
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f7ff bff0 	b.w	800592c <__sfp_lock_release>
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__sinit+0x28>)
 800594e:	6223      	str	r3, [r4, #32]
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <__sinit+0x2c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f5      	bne.n	8005944 <__sinit+0xc>
 8005958:	f7ff ffc4 	bl	80058e4 <global_stdio_init.part.0>
 800595c:	e7f2      	b.n	8005944 <__sinit+0xc>
 800595e:	bf00      	nop
 8005960:	080058a5 	.word	0x080058a5
 8005964:	20000470 	.word	0x20000470

08005968 <_fwalk_sglue>:
 8005968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800596c:	4607      	mov	r7, r0
 800596e:	4688      	mov	r8, r1
 8005970:	4614      	mov	r4, r2
 8005972:	2600      	movs	r6, #0
 8005974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005978:	f1b9 0901 	subs.w	r9, r9, #1
 800597c:	d505      	bpl.n	800598a <_fwalk_sglue+0x22>
 800597e:	6824      	ldr	r4, [r4, #0]
 8005980:	2c00      	cmp	r4, #0
 8005982:	d1f7      	bne.n	8005974 <_fwalk_sglue+0xc>
 8005984:	4630      	mov	r0, r6
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d907      	bls.n	80059a0 <_fwalk_sglue+0x38>
 8005990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005994:	3301      	adds	r3, #1
 8005996:	d003      	beq.n	80059a0 <_fwalk_sglue+0x38>
 8005998:	4629      	mov	r1, r5
 800599a:	4638      	mov	r0, r7
 800599c:	47c0      	blx	r8
 800599e:	4306      	orrs	r6, r0
 80059a0:	3568      	adds	r5, #104	; 0x68
 80059a2:	e7e9      	b.n	8005978 <_fwalk_sglue+0x10>

080059a4 <iprintf>:
 80059a4:	b40f      	push	{r0, r1, r2, r3}
 80059a6:	b507      	push	{r0, r1, r2, lr}
 80059a8:	4906      	ldr	r1, [pc, #24]	; (80059c4 <iprintf+0x20>)
 80059aa:	ab04      	add	r3, sp, #16
 80059ac:	6808      	ldr	r0, [r1, #0]
 80059ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b2:	6881      	ldr	r1, [r0, #8]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f000 f9e9 	bl	8005d8c <_vfiprintf_r>
 80059ba:	b003      	add	sp, #12
 80059bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c0:	b004      	add	sp, #16
 80059c2:	4770      	bx	lr
 80059c4:	20000064 	.word	0x20000064

080059c8 <__sread>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	460c      	mov	r4, r1
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	f000 f868 	bl	8005aa4 <_read_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	bfab      	itete	ge
 80059d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059da:	89a3      	ldrhlt	r3, [r4, #12]
 80059dc:	181b      	addge	r3, r3, r0
 80059de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059e2:	bfac      	ite	ge
 80059e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059e6:	81a3      	strhlt	r3, [r4, #12]
 80059e8:	bd10      	pop	{r4, pc}

080059ea <__swrite>:
 80059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	461f      	mov	r7, r3
 80059f0:	898b      	ldrh	r3, [r1, #12]
 80059f2:	05db      	lsls	r3, r3, #23
 80059f4:	4605      	mov	r5, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	4616      	mov	r6, r2
 80059fa:	d505      	bpl.n	8005a08 <__swrite+0x1e>
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	2302      	movs	r3, #2
 8005a02:	2200      	movs	r2, #0
 8005a04:	f000 f83c 	bl	8005a80 <_lseek_r>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	4632      	mov	r2, r6
 8005a16:	463b      	mov	r3, r7
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	f000 b853 	b.w	8005ac8 <_write_r>

08005a22 <__sseek>:
 8005a22:	b510      	push	{r4, lr}
 8005a24:	460c      	mov	r4, r1
 8005a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2a:	f000 f829 	bl	8005a80 <_lseek_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	bf15      	itete	ne
 8005a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a3e:	81a3      	strheq	r3, [r4, #12]
 8005a40:	bf18      	it	ne
 8005a42:	81a3      	strhne	r3, [r4, #12]
 8005a44:	bd10      	pop	{r4, pc}

08005a46 <__sclose>:
 8005a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4a:	f000 b809 	b.w	8005a60 <_close_r>

08005a4e <memset>:
 8005a4e:	4402      	add	r2, r0
 8005a50:	4603      	mov	r3, r0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d100      	bne.n	8005a58 <memset+0xa>
 8005a56:	4770      	bx	lr
 8005a58:	f803 1b01 	strb.w	r1, [r3], #1
 8005a5c:	e7f9      	b.n	8005a52 <memset+0x4>
	...

08005a60 <_close_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_close_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fb fb2f 	bl	80010ce <_close>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_close_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_close_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000474 	.word	0x20000474

08005a80 <_lseek_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_lseek_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7fb fb44 	bl	800111c <_lseek>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_lseek_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_lseek_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	20000474 	.word	0x20000474

08005aa4 <_read_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d07      	ldr	r5, [pc, #28]	; (8005ac4 <_read_r+0x20>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fb faee 	bl	8001094 <_read>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_read_r+0x1e>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_read_r+0x1e>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000474 	.word	0x20000474

08005ac8 <_write_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	; (8005ae8 <_write_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fb f930 	bl	8000d3c <_write>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_write_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_write_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000474 	.word	0x20000474

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000064 	.word	0x20000064

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4d0d      	ldr	r5, [pc, #52]	; (8005b30 <__libc_init_array+0x38>)
 8005afc:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005afe:	1b64      	subs	r4, r4, r5
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	2600      	movs	r6, #0
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	4d0b      	ldr	r5, [pc, #44]	; (8005b38 <__libc_init_array+0x40>)
 8005b0a:	4c0c      	ldr	r4, [pc, #48]	; (8005b3c <__libc_init_array+0x44>)
 8005b0c:	f000 fdc0 	bl	8006690 <_init>
 8005b10:	1b64      	subs	r4, r4, r5
 8005b12:	10a4      	asrs	r4, r4, #2
 8005b14:	2600      	movs	r6, #0
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b20:	4798      	blx	r3
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2a:	4798      	blx	r3
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	080067bc 	.word	0x080067bc
 8005b34:	080067bc 	.word	0x080067bc
 8005b38:	080067bc 	.word	0x080067bc
 8005b3c:	080067c0 	.word	0x080067c0

08005b40 <__retarget_lock_init_recursive>:
 8005b40:	4770      	bx	lr

08005b42 <__retarget_lock_acquire_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <__retarget_lock_release_recursive>:
 8005b44:	4770      	bx	lr
	...

08005b48 <_free_r>:
 8005b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d044      	beq.n	8005bd8 <_free_r+0x90>
 8005b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b52:	9001      	str	r0, [sp, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f1a1 0404 	sub.w	r4, r1, #4
 8005b5a:	bfb8      	it	lt
 8005b5c:	18e4      	addlt	r4, r4, r3
 8005b5e:	f000 f8df 	bl	8005d20 <__malloc_lock>
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <_free_r+0x94>)
 8005b64:	9801      	ldr	r0, [sp, #4]
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	b933      	cbnz	r3, 8005b78 <_free_r+0x30>
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	6014      	str	r4, [r2, #0]
 8005b6e:	b003      	add	sp, #12
 8005b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b74:	f000 b8da 	b.w	8005d2c <__malloc_unlock>
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d908      	bls.n	8005b8e <_free_r+0x46>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf01      	itttt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	1949      	addeq	r1, r1, r5
 8005b8a:	6021      	streq	r1, [r4, #0]
 8005b8c:	e7ed      	b.n	8005b6a <_free_r+0x22>
 8005b8e:	461a      	mov	r2, r3
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b10b      	cbz	r3, 8005b98 <_free_r+0x50>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d9fa      	bls.n	8005b8e <_free_r+0x46>
 8005b98:	6811      	ldr	r1, [r2, #0]
 8005b9a:	1855      	adds	r5, r2, r1
 8005b9c:	42a5      	cmp	r5, r4
 8005b9e:	d10b      	bne.n	8005bb8 <_free_r+0x70>
 8005ba0:	6824      	ldr	r4, [r4, #0]
 8005ba2:	4421      	add	r1, r4
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	d1e0      	bne.n	8005b6e <_free_r+0x26>
 8005bac:	681c      	ldr	r4, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	6053      	str	r3, [r2, #4]
 8005bb2:	440c      	add	r4, r1
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	e7da      	b.n	8005b6e <_free_r+0x26>
 8005bb8:	d902      	bls.n	8005bc0 <_free_r+0x78>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	e7d6      	b.n	8005b6e <_free_r+0x26>
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf04      	itt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	6063      	str	r3, [r4, #4]
 8005bce:	bf04      	itt	eq
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	6054      	str	r4, [r2, #4]
 8005bd6:	e7ca      	b.n	8005b6e <_free_r+0x26>
 8005bd8:	b003      	add	sp, #12
 8005bda:	bd30      	pop	{r4, r5, pc}
 8005bdc:	2000047c 	.word	0x2000047c

08005be0 <sbrk_aligned>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4e0e      	ldr	r6, [pc, #56]	; (8005c1c <sbrk_aligned+0x3c>)
 8005be4:	460c      	mov	r4, r1
 8005be6:	6831      	ldr	r1, [r6, #0]
 8005be8:	4605      	mov	r5, r0
 8005bea:	b911      	cbnz	r1, 8005bf2 <sbrk_aligned+0x12>
 8005bec:	f000 fcbc 	bl	8006568 <_sbrk_r>
 8005bf0:	6030      	str	r0, [r6, #0]
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f000 fcb7 	bl	8006568 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d00a      	beq.n	8005c14 <sbrk_aligned+0x34>
 8005bfe:	1cc4      	adds	r4, r0, #3
 8005c00:	f024 0403 	bic.w	r4, r4, #3
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	d007      	beq.n	8005c18 <sbrk_aligned+0x38>
 8005c08:	1a21      	subs	r1, r4, r0
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 fcac 	bl	8006568 <_sbrk_r>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d101      	bne.n	8005c18 <sbrk_aligned+0x38>
 8005c14:	f04f 34ff 	mov.w	r4, #4294967295
 8005c18:	4620      	mov	r0, r4
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	20000480 	.word	0x20000480

08005c20 <_malloc_r>:
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	1ccd      	adds	r5, r1, #3
 8005c26:	f025 0503 	bic.w	r5, r5, #3
 8005c2a:	3508      	adds	r5, #8
 8005c2c:	2d0c      	cmp	r5, #12
 8005c2e:	bf38      	it	cc
 8005c30:	250c      	movcc	r5, #12
 8005c32:	2d00      	cmp	r5, #0
 8005c34:	4607      	mov	r7, r0
 8005c36:	db01      	blt.n	8005c3c <_malloc_r+0x1c>
 8005c38:	42a9      	cmp	r1, r5
 8005c3a:	d905      	bls.n	8005c48 <_malloc_r+0x28>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	2600      	movs	r6, #0
 8005c42:	4630      	mov	r0, r6
 8005c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d1c <_malloc_r+0xfc>
 8005c4c:	f000 f868 	bl	8005d20 <__malloc_lock>
 8005c50:	f8d8 3000 	ldr.w	r3, [r8]
 8005c54:	461c      	mov	r4, r3
 8005c56:	bb5c      	cbnz	r4, 8005cb0 <_malloc_r+0x90>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f7ff ffc0 	bl	8005be0 <sbrk_aligned>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	4604      	mov	r4, r0
 8005c64:	d155      	bne.n	8005d12 <_malloc_r+0xf2>
 8005c66:	f8d8 4000 	ldr.w	r4, [r8]
 8005c6a:	4626      	mov	r6, r4
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	d145      	bne.n	8005cfc <_malloc_r+0xdc>
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d048      	beq.n	8005d06 <_malloc_r+0xe6>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	4631      	mov	r1, r6
 8005c78:	4638      	mov	r0, r7
 8005c7a:	eb04 0903 	add.w	r9, r4, r3
 8005c7e:	f000 fc73 	bl	8006568 <_sbrk_r>
 8005c82:	4581      	cmp	r9, r0
 8005c84:	d13f      	bne.n	8005d06 <_malloc_r+0xe6>
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	1a6d      	subs	r5, r5, r1
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff ffa7 	bl	8005be0 <sbrk_aligned>
 8005c92:	3001      	adds	r0, #1
 8005c94:	d037      	beq.n	8005d06 <_malloc_r+0xe6>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	442b      	add	r3, r5
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d038      	beq.n	8005d16 <_malloc_r+0xf6>
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	d12b      	bne.n	8005d02 <_malloc_r+0xe2>
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	e00f      	b.n	8005cd0 <_malloc_r+0xb0>
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	1b52      	subs	r2, r2, r5
 8005cb4:	d41f      	bmi.n	8005cf6 <_malloc_r+0xd6>
 8005cb6:	2a0b      	cmp	r2, #11
 8005cb8:	d917      	bls.n	8005cea <_malloc_r+0xca>
 8005cba:	1961      	adds	r1, r4, r5
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	6025      	str	r5, [r4, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	6059      	strne	r1, [r3, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	bf08      	it	eq
 8005cc8:	f8c8 1000 	streq.w	r1, [r8]
 8005ccc:	5162      	str	r2, [r4, r5]
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f104 060b 	add.w	r6, r4, #11
 8005cd6:	f000 f829 	bl	8005d2c <__malloc_unlock>
 8005cda:	f026 0607 	bic.w	r6, r6, #7
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	1af2      	subs	r2, r6, r3
 8005ce2:	d0ae      	beq.n	8005c42 <_malloc_r+0x22>
 8005ce4:	1b9b      	subs	r3, r3, r6
 8005ce6:	50a3      	str	r3, [r4, r2]
 8005ce8:	e7ab      	b.n	8005c42 <_malloc_r+0x22>
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	d1dd      	bne.n	8005cac <_malloc_r+0x8c>
 8005cf0:	f8c8 2000 	str.w	r2, [r8]
 8005cf4:	e7ec      	b.n	8005cd0 <_malloc_r+0xb0>
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	6864      	ldr	r4, [r4, #4]
 8005cfa:	e7ac      	b.n	8005c56 <_malloc_r+0x36>
 8005cfc:	4634      	mov	r4, r6
 8005cfe:	6876      	ldr	r6, [r6, #4]
 8005d00:	e7b4      	b.n	8005c6c <_malloc_r+0x4c>
 8005d02:	4613      	mov	r3, r2
 8005d04:	e7cc      	b.n	8005ca0 <_malloc_r+0x80>
 8005d06:	230c      	movs	r3, #12
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f000 f80e 	bl	8005d2c <__malloc_unlock>
 8005d10:	e797      	b.n	8005c42 <_malloc_r+0x22>
 8005d12:	6025      	str	r5, [r4, #0]
 8005d14:	e7dc      	b.n	8005cd0 <_malloc_r+0xb0>
 8005d16:	605b      	str	r3, [r3, #4]
 8005d18:	deff      	udf	#255	; 0xff
 8005d1a:	bf00      	nop
 8005d1c:	2000047c 	.word	0x2000047c

08005d20 <__malloc_lock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	; (8005d28 <__malloc_lock+0x8>)
 8005d22:	f7ff bf0e 	b.w	8005b42 <__retarget_lock_acquire_recursive>
 8005d26:	bf00      	nop
 8005d28:	20000478 	.word	0x20000478

08005d2c <__malloc_unlock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_unlock+0x8>)
 8005d2e:	f7ff bf09 	b.w	8005b44 <__retarget_lock_release_recursive>
 8005d32:	bf00      	nop
 8005d34:	20000478 	.word	0x20000478

08005d38 <__sfputc_r>:
 8005d38:	6893      	ldr	r3, [r2, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	b410      	push	{r4}
 8005d40:	6093      	str	r3, [r2, #8]
 8005d42:	da08      	bge.n	8005d56 <__sfputc_r+0x1e>
 8005d44:	6994      	ldr	r4, [r2, #24]
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	db01      	blt.n	8005d4e <__sfputc_r+0x16>
 8005d4a:	290a      	cmp	r1, #10
 8005d4c:	d103      	bne.n	8005d56 <__sfputc_r+0x1e>
 8005d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d52:	f000 bb73 	b.w	800643c <__swbuf_r>
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	1c58      	adds	r0, r3, #1
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	7019      	strb	r1, [r3, #0]
 8005d5e:	4608      	mov	r0, r1
 8005d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <__sfputs_r>:
 8005d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d68:	4606      	mov	r6, r0
 8005d6a:	460f      	mov	r7, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	18d5      	adds	r5, r2, r3
 8005d70:	42ac      	cmp	r4, r5
 8005d72:	d101      	bne.n	8005d78 <__sfputs_r+0x12>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e007      	b.n	8005d88 <__sfputs_r+0x22>
 8005d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d7c:	463a      	mov	r2, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ffda 	bl	8005d38 <__sfputc_r>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d1f3      	bne.n	8005d70 <__sfputs_r+0xa>
 8005d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d8c <_vfiprintf_r>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	460d      	mov	r5, r1
 8005d92:	b09d      	sub	sp, #116	; 0x74
 8005d94:	4614      	mov	r4, r2
 8005d96:	4698      	mov	r8, r3
 8005d98:	4606      	mov	r6, r0
 8005d9a:	b118      	cbz	r0, 8005da4 <_vfiprintf_r+0x18>
 8005d9c:	6a03      	ldr	r3, [r0, #32]
 8005d9e:	b90b      	cbnz	r3, 8005da4 <_vfiprintf_r+0x18>
 8005da0:	f7ff fdca 	bl	8005938 <__sinit>
 8005da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da6:	07d9      	lsls	r1, r3, #31
 8005da8:	d405      	bmi.n	8005db6 <_vfiprintf_r+0x2a>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	059a      	lsls	r2, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_vfiprintf_r+0x2a>
 8005db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db2:	f7ff fec6 	bl	8005b42 <__retarget_lock_acquire_recursive>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	071b      	lsls	r3, r3, #28
 8005dba:	d501      	bpl.n	8005dc0 <_vfiprintf_r+0x34>
 8005dbc:	692b      	ldr	r3, [r5, #16]
 8005dbe:	b99b      	cbnz	r3, 8005de8 <_vfiprintf_r+0x5c>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f000 fb78 	bl	80064b8 <__swsetup_r>
 8005dc8:	b170      	cbz	r0, 8005de8 <_vfiprintf_r+0x5c>
 8005dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dcc:	07dc      	lsls	r4, r3, #31
 8005dce:	d504      	bpl.n	8005dda <_vfiprintf_r+0x4e>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	b01d      	add	sp, #116	; 0x74
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	0598      	lsls	r0, r3, #22
 8005dde:	d4f7      	bmi.n	8005dd0 <_vfiprintf_r+0x44>
 8005de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de2:	f7ff feaf 	bl	8005b44 <__retarget_lock_release_recursive>
 8005de6:	e7f3      	b.n	8005dd0 <_vfiprintf_r+0x44>
 8005de8:	2300      	movs	r3, #0
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	2320      	movs	r3, #32
 8005dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df6:	2330      	movs	r3, #48	; 0x30
 8005df8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005fac <_vfiprintf_r+0x220>
 8005dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e00:	f04f 0901 	mov.w	r9, #1
 8005e04:	4623      	mov	r3, r4
 8005e06:	469a      	mov	sl, r3
 8005e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0c:	b10a      	cbz	r2, 8005e12 <_vfiprintf_r+0x86>
 8005e0e:	2a25      	cmp	r2, #37	; 0x25
 8005e10:	d1f9      	bne.n	8005e06 <_vfiprintf_r+0x7a>
 8005e12:	ebba 0b04 	subs.w	fp, sl, r4
 8005e16:	d00b      	beq.n	8005e30 <_vfiprintf_r+0xa4>
 8005e18:	465b      	mov	r3, fp
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ffa1 	bl	8005d66 <__sfputs_r>
 8005e24:	3001      	adds	r0, #1
 8005e26:	f000 80a9 	beq.w	8005f7c <_vfiprintf_r+0x1f0>
 8005e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e2c:	445a      	add	r2, fp
 8005e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e30:	f89a 3000 	ldrb.w	r3, [sl]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80a1 	beq.w	8005f7c <_vfiprintf_r+0x1f0>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e44:	f10a 0a01 	add.w	sl, sl, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e50:	931a      	str	r3, [sp, #104]	; 0x68
 8005e52:	4654      	mov	r4, sl
 8005e54:	2205      	movs	r2, #5
 8005e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5a:	4854      	ldr	r0, [pc, #336]	; (8005fac <_vfiprintf_r+0x220>)
 8005e5c:	f7fa f9c0 	bl	80001e0 <memchr>
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	b9d8      	cbnz	r0, 8005e9c <_vfiprintf_r+0x110>
 8005e64:	06d1      	lsls	r1, r2, #27
 8005e66:	bf44      	itt	mi
 8005e68:	2320      	movmi	r3, #32
 8005e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e6e:	0713      	lsls	r3, r2, #28
 8005e70:	bf44      	itt	mi
 8005e72:	232b      	movmi	r3, #43	; 0x2b
 8005e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e78:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7e:	d015      	beq.n	8005eac <_vfiprintf_r+0x120>
 8005e80:	9a07      	ldr	r2, [sp, #28]
 8005e82:	4654      	mov	r4, sl
 8005e84:	2000      	movs	r0, #0
 8005e86:	f04f 0c0a 	mov.w	ip, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e90:	3b30      	subs	r3, #48	; 0x30
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d94d      	bls.n	8005f32 <_vfiprintf_r+0x1a6>
 8005e96:	b1b0      	cbz	r0, 8005ec6 <_vfiprintf_r+0x13a>
 8005e98:	9207      	str	r2, [sp, #28]
 8005e9a:	e014      	b.n	8005ec6 <_vfiprintf_r+0x13a>
 8005e9c:	eba0 0308 	sub.w	r3, r0, r8
 8005ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	46a2      	mov	sl, r4
 8005eaa:	e7d2      	b.n	8005e52 <_vfiprintf_r+0xc6>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1d19      	adds	r1, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	9103      	str	r1, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfbb      	ittet	lt
 8005eb8:	425b      	neglt	r3, r3
 8005eba:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebe:	9307      	strge	r3, [sp, #28]
 8005ec0:	9307      	strlt	r3, [sp, #28]
 8005ec2:	bfb8      	it	lt
 8005ec4:	9204      	strlt	r2, [sp, #16]
 8005ec6:	7823      	ldrb	r3, [r4, #0]
 8005ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eca:	d10c      	bne.n	8005ee6 <_vfiprintf_r+0x15a>
 8005ecc:	7863      	ldrb	r3, [r4, #1]
 8005ece:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed0:	d134      	bne.n	8005f3c <_vfiprintf_r+0x1b0>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	1d1a      	adds	r2, r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	9203      	str	r2, [sp, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfb8      	it	lt
 8005ede:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee2:	3402      	adds	r4, #2
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005fbc <_vfiprintf_r+0x230>
 8005eea:	7821      	ldrb	r1, [r4, #0]
 8005eec:	2203      	movs	r2, #3
 8005eee:	4650      	mov	r0, sl
 8005ef0:	f7fa f976 	bl	80001e0 <memchr>
 8005ef4:	b138      	cbz	r0, 8005f06 <_vfiprintf_r+0x17a>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	eba0 000a 	sub.w	r0, r0, sl
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	4082      	lsls	r2, r0
 8005f00:	4313      	orrs	r3, r2
 8005f02:	3401      	adds	r4, #1
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0a:	4829      	ldr	r0, [pc, #164]	; (8005fb0 <_vfiprintf_r+0x224>)
 8005f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f10:	2206      	movs	r2, #6
 8005f12:	f7fa f965 	bl	80001e0 <memchr>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d03f      	beq.n	8005f9a <_vfiprintf_r+0x20e>
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <_vfiprintf_r+0x228>)
 8005f1c:	bb1b      	cbnz	r3, 8005f66 <_vfiprintf_r+0x1da>
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	3307      	adds	r3, #7
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	3308      	adds	r3, #8
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2c:	443b      	add	r3, r7
 8005f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f30:	e768      	b.n	8005e04 <_vfiprintf_r+0x78>
 8005f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f36:	460c      	mov	r4, r1
 8005f38:	2001      	movs	r0, #1
 8005f3a:	e7a6      	b.n	8005e8a <_vfiprintf_r+0xfe>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0c0a 	mov.w	ip, #10
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f4e:	3a30      	subs	r2, #48	; 0x30
 8005f50:	2a09      	cmp	r2, #9
 8005f52:	d903      	bls.n	8005f5c <_vfiprintf_r+0x1d0>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0c6      	beq.n	8005ee6 <_vfiprintf_r+0x15a>
 8005f58:	9105      	str	r1, [sp, #20]
 8005f5a:	e7c4      	b.n	8005ee6 <_vfiprintf_r+0x15a>
 8005f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f60:	4604      	mov	r4, r0
 8005f62:	2301      	movs	r3, #1
 8005f64:	e7f0      	b.n	8005f48 <_vfiprintf_r+0x1bc>
 8005f66:	ab03      	add	r3, sp, #12
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <_vfiprintf_r+0x22c>)
 8005f6e:	a904      	add	r1, sp, #16
 8005f70:	4630      	mov	r0, r6
 8005f72:	f3af 8000 	nop.w
 8005f76:	4607      	mov	r7, r0
 8005f78:	1c78      	adds	r0, r7, #1
 8005f7a:	d1d6      	bne.n	8005f2a <_vfiprintf_r+0x19e>
 8005f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f7e:	07d9      	lsls	r1, r3, #31
 8005f80:	d405      	bmi.n	8005f8e <_vfiprintf_r+0x202>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	059a      	lsls	r2, r3, #22
 8005f86:	d402      	bmi.n	8005f8e <_vfiprintf_r+0x202>
 8005f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f8a:	f7ff fddb 	bl	8005b44 <__retarget_lock_release_recursive>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	065b      	lsls	r3, r3, #25
 8005f92:	f53f af1d 	bmi.w	8005dd0 <_vfiprintf_r+0x44>
 8005f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f98:	e71c      	b.n	8005dd4 <_vfiprintf_r+0x48>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <_vfiprintf_r+0x22c>)
 8005fa2:	a904      	add	r1, sp, #16
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 f879 	bl	800609c <_printf_i>
 8005faa:	e7e4      	b.n	8005f76 <_vfiprintf_r+0x1ea>
 8005fac:	08006780 	.word	0x08006780
 8005fb0:	0800678a 	.word	0x0800678a
 8005fb4:	00000000 	.word	0x00000000
 8005fb8:	08005d67 	.word	0x08005d67
 8005fbc:	08006786 	.word	0x08006786

08005fc0 <_printf_common>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	4699      	mov	r9, r3
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	bfb8      	it	lt
 8005fd4:	4613      	movlt	r3, r2
 8005fd6:	6033      	str	r3, [r6, #0]
 8005fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fdc:	4607      	mov	r7, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b10a      	cbz	r2, 8005fe6 <_printf_common+0x26>
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	0699      	lsls	r1, r3, #26
 8005fea:	bf42      	ittt	mi
 8005fec:	6833      	ldrmi	r3, [r6, #0]
 8005fee:	3302      	addmi	r3, #2
 8005ff0:	6033      	strmi	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	f015 0506 	ands.w	r5, r5, #6
 8005ff8:	d106      	bne.n	8006008 <_printf_common+0x48>
 8005ffa:	f104 0a19 	add.w	sl, r4, #25
 8005ffe:	68e3      	ldr	r3, [r4, #12]
 8006000:	6832      	ldr	r2, [r6, #0]
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	42ab      	cmp	r3, r5
 8006006:	dc26      	bgt.n	8006056 <_printf_common+0x96>
 8006008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800600c:	1e13      	subs	r3, r2, #0
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	bf18      	it	ne
 8006012:	2301      	movne	r3, #1
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d42b      	bmi.n	8006070 <_printf_common+0xb0>
 8006018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800601c:	4649      	mov	r1, r9
 800601e:	4638      	mov	r0, r7
 8006020:	47c0      	blx	r8
 8006022:	3001      	adds	r0, #1
 8006024:	d01e      	beq.n	8006064 <_printf_common+0xa4>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	2b04      	cmp	r3, #4
 8006030:	bf02      	ittt	eq
 8006032:	68e5      	ldreq	r5, [r4, #12]
 8006034:	6833      	ldreq	r3, [r6, #0]
 8006036:	1aed      	subeq	r5, r5, r3
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	bf0c      	ite	eq
 800603c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006040:	2500      	movne	r5, #0
 8006042:	4293      	cmp	r3, r2
 8006044:	bfc4      	itt	gt
 8006046:	1a9b      	subgt	r3, r3, r2
 8006048:	18ed      	addgt	r5, r5, r3
 800604a:	2600      	movs	r6, #0
 800604c:	341a      	adds	r4, #26
 800604e:	42b5      	cmp	r5, r6
 8006050:	d11a      	bne.n	8006088 <_printf_common+0xc8>
 8006052:	2000      	movs	r0, #0
 8006054:	e008      	b.n	8006068 <_printf_common+0xa8>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4649      	mov	r1, r9
 800605c:	4638      	mov	r0, r7
 800605e:	47c0      	blx	r8
 8006060:	3001      	adds	r0, #1
 8006062:	d103      	bne.n	800606c <_printf_common+0xac>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	3501      	adds	r5, #1
 800606e:	e7c6      	b.n	8005ffe <_printf_common+0x3e>
 8006070:	18e1      	adds	r1, r4, r3
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	2030      	movs	r0, #48	; 0x30
 8006076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607a:	4422      	add	r2, r4
 800607c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006084:	3302      	adds	r3, #2
 8006086:	e7c7      	b.n	8006018 <_printf_common+0x58>
 8006088:	2301      	movs	r3, #1
 800608a:	4622      	mov	r2, r4
 800608c:	4649      	mov	r1, r9
 800608e:	4638      	mov	r0, r7
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d0e6      	beq.n	8006064 <_printf_common+0xa4>
 8006096:	3601      	adds	r6, #1
 8006098:	e7d9      	b.n	800604e <_printf_common+0x8e>
	...

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a4:	2f78      	cmp	r7, #120	; 0x78
 80060a6:	4691      	mov	r9, r2
 80060a8:	4680      	mov	r8, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	469a      	mov	sl, r3
 80060ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	; 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d4 	beq.w	8006266 <_printf_i+0x1ca>
 80060be:	2f58      	cmp	r7, #88	; 0x58
 80060c0:	f000 80c0 	beq.w	8006244 <_printf_i+0x1a8>
 80060c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	; (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	0800624d 	.word	0x0800624d
 800610c:	08006175 	.word	0x08006175
 8006110:	08006207 	.word	0x08006207
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	0800626f 	.word	0x0800626f
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006175 	.word	0x08006175
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	0800620f 	.word	0x0800620f
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	602a      	str	r2, [r5, #0]
 800613c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e09f      	b.n	8006288 <_printf_i+0x1ec>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	0607      	lsls	r7, r0, #24
 800614e:	f103 0104 	add.w	r1, r3, #4
 8006152:	6029      	str	r1, [r5, #0]
 8006154:	d501      	bpl.n	800615a <_printf_i+0xbe>
 8006156:	681e      	ldr	r6, [r3, #0]
 8006158:	e003      	b.n	8006162 <_printf_i+0xc6>
 800615a:	0646      	lsls	r6, r0, #25
 800615c:	d5fb      	bpl.n	8006156 <_printf_i+0xba>
 800615e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006162:	2e00      	cmp	r6, #0
 8006164:	da03      	bge.n	800616e <_printf_i+0xd2>
 8006166:	232d      	movs	r3, #45	; 0x2d
 8006168:	4276      	negs	r6, r6
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616e:	485a      	ldr	r0, [pc, #360]	; (80062d8 <_printf_i+0x23c>)
 8006170:	230a      	movs	r3, #10
 8006172:	e012      	b.n	800619a <_printf_i+0xfe>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	6820      	ldr	r0, [r4, #0]
 8006178:	1d19      	adds	r1, r3, #4
 800617a:	6029      	str	r1, [r5, #0]
 800617c:	0605      	lsls	r5, r0, #24
 800617e:	d501      	bpl.n	8006184 <_printf_i+0xe8>
 8006180:	681e      	ldr	r6, [r3, #0]
 8006182:	e002      	b.n	800618a <_printf_i+0xee>
 8006184:	0641      	lsls	r1, r0, #25
 8006186:	d5fb      	bpl.n	8006180 <_printf_i+0xe4>
 8006188:	881e      	ldrh	r6, [r3, #0]
 800618a:	4853      	ldr	r0, [pc, #332]	; (80062d8 <_printf_i+0x23c>)
 800618c:	2f6f      	cmp	r7, #111	; 0x6f
 800618e:	bf0c      	ite	eq
 8006190:	2308      	moveq	r3, #8
 8006192:	230a      	movne	r3, #10
 8006194:	2100      	movs	r1, #0
 8006196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800619a:	6865      	ldr	r5, [r4, #4]
 800619c:	60a5      	str	r5, [r4, #8]
 800619e:	2d00      	cmp	r5, #0
 80061a0:	bfa2      	ittt	ge
 80061a2:	6821      	ldrge	r1, [r4, #0]
 80061a4:	f021 0104 	bicge.w	r1, r1, #4
 80061a8:	6021      	strge	r1, [r4, #0]
 80061aa:	b90e      	cbnz	r6, 80061b0 <_printf_i+0x114>
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	d04b      	beq.n	8006248 <_printf_i+0x1ac>
 80061b0:	4615      	mov	r5, r2
 80061b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061b6:	fb03 6711 	mls	r7, r3, r1, r6
 80061ba:	5dc7      	ldrb	r7, [r0, r7]
 80061bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061c0:	4637      	mov	r7, r6
 80061c2:	42bb      	cmp	r3, r7
 80061c4:	460e      	mov	r6, r1
 80061c6:	d9f4      	bls.n	80061b2 <_printf_i+0x116>
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d10b      	bne.n	80061e4 <_printf_i+0x148>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	07de      	lsls	r6, r3, #31
 80061d0:	d508      	bpl.n	80061e4 <_printf_i+0x148>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	6861      	ldr	r1, [r4, #4]
 80061d6:	4299      	cmp	r1, r3
 80061d8:	bfde      	ittt	le
 80061da:	2330      	movle	r3, #48	; 0x30
 80061dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061e4:	1b52      	subs	r2, r2, r5
 80061e6:	6122      	str	r2, [r4, #16]
 80061e8:	f8cd a000 	str.w	sl, [sp]
 80061ec:	464b      	mov	r3, r9
 80061ee:	aa03      	add	r2, sp, #12
 80061f0:	4621      	mov	r1, r4
 80061f2:	4640      	mov	r0, r8
 80061f4:	f7ff fee4 	bl	8005fc0 <_printf_common>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d14a      	bne.n	8006292 <_printf_i+0x1f6>
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	b004      	add	sp, #16
 8006202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f043 0320 	orr.w	r3, r3, #32
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	4833      	ldr	r0, [pc, #204]	; (80062dc <_printf_i+0x240>)
 8006210:	2778      	movs	r7, #120	; 0x78
 8006212:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	6829      	ldr	r1, [r5, #0]
 800621a:	061f      	lsls	r7, r3, #24
 800621c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006220:	d402      	bmi.n	8006228 <_printf_i+0x18c>
 8006222:	065f      	lsls	r7, r3, #25
 8006224:	bf48      	it	mi
 8006226:	b2b6      	uxthmi	r6, r6
 8006228:	07df      	lsls	r7, r3, #31
 800622a:	bf48      	it	mi
 800622c:	f043 0320 	orrmi.w	r3, r3, #32
 8006230:	6029      	str	r1, [r5, #0]
 8006232:	bf48      	it	mi
 8006234:	6023      	strmi	r3, [r4, #0]
 8006236:	b91e      	cbnz	r6, 8006240 <_printf_i+0x1a4>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	2310      	movs	r3, #16
 8006242:	e7a7      	b.n	8006194 <_printf_i+0xf8>
 8006244:	4824      	ldr	r0, [pc, #144]	; (80062d8 <_printf_i+0x23c>)
 8006246:	e7e4      	b.n	8006212 <_printf_i+0x176>
 8006248:	4615      	mov	r5, r2
 800624a:	e7bd      	b.n	80061c8 <_printf_i+0x12c>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6826      	ldr	r6, [r4, #0]
 8006250:	6961      	ldr	r1, [r4, #20]
 8006252:	1d18      	adds	r0, r3, #4
 8006254:	6028      	str	r0, [r5, #0]
 8006256:	0635      	lsls	r5, r6, #24
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	d501      	bpl.n	8006260 <_printf_i+0x1c4>
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0x1ca>
 8006260:	0670      	lsls	r0, r6, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0x1c0>
 8006264:	8019      	strh	r1, [r3, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	4615      	mov	r5, r2
 800626c:	e7bc      	b.n	80061e8 <_printf_i+0x14c>
 800626e:	682b      	ldr	r3, [r5, #0]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	2100      	movs	r1, #0
 800627a:	4628      	mov	r0, r5
 800627c:	f7f9 ffb0 	bl	80001e0 <memchr>
 8006280:	b108      	cbz	r0, 8006286 <_printf_i+0x1ea>
 8006282:	1b40      	subs	r0, r0, r5
 8006284:	6060      	str	r0, [r4, #4]
 8006286:	6863      	ldr	r3, [r4, #4]
 8006288:	6123      	str	r3, [r4, #16]
 800628a:	2300      	movs	r3, #0
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006290:	e7aa      	b.n	80061e8 <_printf_i+0x14c>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	462a      	mov	r2, r5
 8006296:	4649      	mov	r1, r9
 8006298:	4640      	mov	r0, r8
 800629a:	47d0      	blx	sl
 800629c:	3001      	adds	r0, #1
 800629e:	d0ad      	beq.n	80061fc <_printf_i+0x160>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	079b      	lsls	r3, r3, #30
 80062a4:	d413      	bmi.n	80062ce <_printf_i+0x232>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	9b03      	ldr	r3, [sp, #12]
 80062aa:	4298      	cmp	r0, r3
 80062ac:	bfb8      	it	lt
 80062ae:	4618      	movlt	r0, r3
 80062b0:	e7a6      	b.n	8006200 <_printf_i+0x164>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4632      	mov	r2, r6
 80062b6:	4649      	mov	r1, r9
 80062b8:	4640      	mov	r0, r8
 80062ba:	47d0      	blx	sl
 80062bc:	3001      	adds	r0, #1
 80062be:	d09d      	beq.n	80061fc <_printf_i+0x160>
 80062c0:	3501      	adds	r5, #1
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	1a5b      	subs	r3, r3, r1
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dcf2      	bgt.n	80062b2 <_printf_i+0x216>
 80062cc:	e7eb      	b.n	80062a6 <_printf_i+0x20a>
 80062ce:	2500      	movs	r5, #0
 80062d0:	f104 0619 	add.w	r6, r4, #25
 80062d4:	e7f5      	b.n	80062c2 <_printf_i+0x226>
 80062d6:	bf00      	nop
 80062d8:	08006791 	.word	0x08006791
 80062dc:	080067a2 	.word	0x080067a2

080062e0 <__sflush_r>:
 80062e0:	898a      	ldrh	r2, [r1, #12]
 80062e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e6:	4605      	mov	r5, r0
 80062e8:	0710      	lsls	r0, r2, #28
 80062ea:	460c      	mov	r4, r1
 80062ec:	d458      	bmi.n	80063a0 <__sflush_r+0xc0>
 80062ee:	684b      	ldr	r3, [r1, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dc05      	bgt.n	8006300 <__sflush_r+0x20>
 80062f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dc02      	bgt.n	8006300 <__sflush_r+0x20>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006302:	2e00      	cmp	r6, #0
 8006304:	d0f9      	beq.n	80062fa <__sflush_r+0x1a>
 8006306:	2300      	movs	r3, #0
 8006308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800630c:	682f      	ldr	r7, [r5, #0]
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	d032      	beq.n	800637a <__sflush_r+0x9a>
 8006314:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	075a      	lsls	r2, r3, #29
 800631a:	d505      	bpl.n	8006328 <__sflush_r+0x48>
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	1ac0      	subs	r0, r0, r3
 8006320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006322:	b10b      	cbz	r3, 8006328 <__sflush_r+0x48>
 8006324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006326:	1ac0      	subs	r0, r0, r3
 8006328:	2300      	movs	r3, #0
 800632a:	4602      	mov	r2, r0
 800632c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632e:	6a21      	ldr	r1, [r4, #32]
 8006330:	4628      	mov	r0, r5
 8006332:	47b0      	blx	r6
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	d106      	bne.n	8006348 <__sflush_r+0x68>
 800633a:	6829      	ldr	r1, [r5, #0]
 800633c:	291d      	cmp	r1, #29
 800633e:	d82b      	bhi.n	8006398 <__sflush_r+0xb8>
 8006340:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <__sflush_r+0x108>)
 8006342:	410a      	asrs	r2, r1
 8006344:	07d6      	lsls	r6, r2, #31
 8006346:	d427      	bmi.n	8006398 <__sflush_r+0xb8>
 8006348:	2200      	movs	r2, #0
 800634a:	6062      	str	r2, [r4, #4]
 800634c:	04d9      	lsls	r1, r3, #19
 800634e:	6922      	ldr	r2, [r4, #16]
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	d504      	bpl.n	800635e <__sflush_r+0x7e>
 8006354:	1c42      	adds	r2, r0, #1
 8006356:	d101      	bne.n	800635c <__sflush_r+0x7c>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b903      	cbnz	r3, 800635e <__sflush_r+0x7e>
 800635c:	6560      	str	r0, [r4, #84]	; 0x54
 800635e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006360:	602f      	str	r7, [r5, #0]
 8006362:	2900      	cmp	r1, #0
 8006364:	d0c9      	beq.n	80062fa <__sflush_r+0x1a>
 8006366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800636a:	4299      	cmp	r1, r3
 800636c:	d002      	beq.n	8006374 <__sflush_r+0x94>
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff fbea 	bl	8005b48 <_free_r>
 8006374:	2000      	movs	r0, #0
 8006376:	6360      	str	r0, [r4, #52]	; 0x34
 8006378:	e7c0      	b.n	80062fc <__sflush_r+0x1c>
 800637a:	2301      	movs	r3, #1
 800637c:	4628      	mov	r0, r5
 800637e:	47b0      	blx	r6
 8006380:	1c41      	adds	r1, r0, #1
 8006382:	d1c8      	bne.n	8006316 <__sflush_r+0x36>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0c5      	beq.n	8006316 <__sflush_r+0x36>
 800638a:	2b1d      	cmp	r3, #29
 800638c:	d001      	beq.n	8006392 <__sflush_r+0xb2>
 800638e:	2b16      	cmp	r3, #22
 8006390:	d101      	bne.n	8006396 <__sflush_r+0xb6>
 8006392:	602f      	str	r7, [r5, #0]
 8006394:	e7b1      	b.n	80062fa <__sflush_r+0x1a>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	e7ad      	b.n	80062fc <__sflush_r+0x1c>
 80063a0:	690f      	ldr	r7, [r1, #16]
 80063a2:	2f00      	cmp	r7, #0
 80063a4:	d0a9      	beq.n	80062fa <__sflush_r+0x1a>
 80063a6:	0793      	lsls	r3, r2, #30
 80063a8:	680e      	ldr	r6, [r1, #0]
 80063aa:	bf08      	it	eq
 80063ac:	694b      	ldreq	r3, [r1, #20]
 80063ae:	600f      	str	r7, [r1, #0]
 80063b0:	bf18      	it	ne
 80063b2:	2300      	movne	r3, #0
 80063b4:	eba6 0807 	sub.w	r8, r6, r7
 80063b8:	608b      	str	r3, [r1, #8]
 80063ba:	f1b8 0f00 	cmp.w	r8, #0
 80063be:	dd9c      	ble.n	80062fa <__sflush_r+0x1a>
 80063c0:	6a21      	ldr	r1, [r4, #32]
 80063c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063c4:	4643      	mov	r3, r8
 80063c6:	463a      	mov	r2, r7
 80063c8:	4628      	mov	r0, r5
 80063ca:	47b0      	blx	r6
 80063cc:	2800      	cmp	r0, #0
 80063ce:	dc06      	bgt.n	80063de <__sflush_r+0xfe>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	e78e      	b.n	80062fc <__sflush_r+0x1c>
 80063de:	4407      	add	r7, r0
 80063e0:	eba8 0800 	sub.w	r8, r8, r0
 80063e4:	e7e9      	b.n	80063ba <__sflush_r+0xda>
 80063e6:	bf00      	nop
 80063e8:	dfbffffe 	.word	0xdfbffffe

080063ec <_fflush_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	690b      	ldr	r3, [r1, #16]
 80063f0:	4605      	mov	r5, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b913      	cbnz	r3, 80063fc <_fflush_r+0x10>
 80063f6:	2500      	movs	r5, #0
 80063f8:	4628      	mov	r0, r5
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	b118      	cbz	r0, 8006406 <_fflush_r+0x1a>
 80063fe:	6a03      	ldr	r3, [r0, #32]
 8006400:	b90b      	cbnz	r3, 8006406 <_fflush_r+0x1a>
 8006402:	f7ff fa99 	bl	8005938 <__sinit>
 8006406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f3      	beq.n	80063f6 <_fflush_r+0xa>
 800640e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006410:	07d0      	lsls	r0, r2, #31
 8006412:	d404      	bmi.n	800641e <_fflush_r+0x32>
 8006414:	0599      	lsls	r1, r3, #22
 8006416:	d402      	bmi.n	800641e <_fflush_r+0x32>
 8006418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641a:	f7ff fb92 	bl	8005b42 <__retarget_lock_acquire_recursive>
 800641e:	4628      	mov	r0, r5
 8006420:	4621      	mov	r1, r4
 8006422:	f7ff ff5d 	bl	80062e0 <__sflush_r>
 8006426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006428:	07da      	lsls	r2, r3, #31
 800642a:	4605      	mov	r5, r0
 800642c:	d4e4      	bmi.n	80063f8 <_fflush_r+0xc>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d4e1      	bmi.n	80063f8 <_fflush_r+0xc>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f7ff fb85 	bl	8005b44 <__retarget_lock_release_recursive>
 800643a:	e7dd      	b.n	80063f8 <_fflush_r+0xc>

0800643c <__swbuf_r>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	460e      	mov	r6, r1
 8006440:	4614      	mov	r4, r2
 8006442:	4605      	mov	r5, r0
 8006444:	b118      	cbz	r0, 800644e <__swbuf_r+0x12>
 8006446:	6a03      	ldr	r3, [r0, #32]
 8006448:	b90b      	cbnz	r3, 800644e <__swbuf_r+0x12>
 800644a:	f7ff fa75 	bl	8005938 <__sinit>
 800644e:	69a3      	ldr	r3, [r4, #24]
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	071a      	lsls	r2, r3, #28
 8006456:	d525      	bpl.n	80064a4 <__swbuf_r+0x68>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b31b      	cbz	r3, 80064a4 <__swbuf_r+0x68>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	6922      	ldr	r2, [r4, #16]
 8006460:	1a98      	subs	r0, r3, r2
 8006462:	6963      	ldr	r3, [r4, #20]
 8006464:	b2f6      	uxtb	r6, r6
 8006466:	4283      	cmp	r3, r0
 8006468:	4637      	mov	r7, r6
 800646a:	dc04      	bgt.n	8006476 <__swbuf_r+0x3a>
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f7ff ffbc 	bl	80063ec <_fflush_r>
 8006474:	b9e0      	cbnz	r0, 80064b0 <__swbuf_r+0x74>
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	3b01      	subs	r3, #1
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	6022      	str	r2, [r4, #0]
 8006482:	701e      	strb	r6, [r3, #0]
 8006484:	6962      	ldr	r2, [r4, #20]
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	429a      	cmp	r2, r3
 800648a:	d004      	beq.n	8006496 <__swbuf_r+0x5a>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d506      	bpl.n	80064a0 <__swbuf_r+0x64>
 8006492:	2e0a      	cmp	r6, #10
 8006494:	d104      	bne.n	80064a0 <__swbuf_r+0x64>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f7ff ffa7 	bl	80063ec <_fflush_r>
 800649e:	b938      	cbnz	r0, 80064b0 <__swbuf_r+0x74>
 80064a0:	4638      	mov	r0, r7
 80064a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f806 	bl	80064b8 <__swsetup_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0d5      	beq.n	800645c <__swbuf_r+0x20>
 80064b0:	f04f 37ff 	mov.w	r7, #4294967295
 80064b4:	e7f4      	b.n	80064a0 <__swbuf_r+0x64>
	...

080064b8 <__swsetup_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <__swsetup_r+0xac>)
 80064bc:	4605      	mov	r5, r0
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	460c      	mov	r4, r1
 80064c2:	b118      	cbz	r0, 80064cc <__swsetup_r+0x14>
 80064c4:	6a03      	ldr	r3, [r0, #32]
 80064c6:	b90b      	cbnz	r3, 80064cc <__swsetup_r+0x14>
 80064c8:	f7ff fa36 	bl	8005938 <__sinit>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064d2:	0718      	lsls	r0, r3, #28
 80064d4:	d422      	bmi.n	800651c <__swsetup_r+0x64>
 80064d6:	06d9      	lsls	r1, r3, #27
 80064d8:	d407      	bmi.n	80064ea <__swsetup_r+0x32>
 80064da:	2309      	movs	r3, #9
 80064dc:	602b      	str	r3, [r5, #0]
 80064de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	e034      	b.n	8006554 <__swsetup_r+0x9c>
 80064ea:	0758      	lsls	r0, r3, #29
 80064ec:	d512      	bpl.n	8006514 <__swsetup_r+0x5c>
 80064ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064f0:	b141      	cbz	r1, 8006504 <__swsetup_r+0x4c>
 80064f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064f6:	4299      	cmp	r1, r3
 80064f8:	d002      	beq.n	8006500 <__swsetup_r+0x48>
 80064fa:	4628      	mov	r0, r5
 80064fc:	f7ff fb24 	bl	8005b48 <_free_r>
 8006500:	2300      	movs	r3, #0
 8006502:	6363      	str	r3, [r4, #52]	; 0x34
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	2300      	movs	r3, #0
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	f043 0308 	orr.w	r3, r3, #8
 800651a:	81a3      	strh	r3, [r4, #12]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	b94b      	cbnz	r3, 8006534 <__swsetup_r+0x7c>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652a:	d003      	beq.n	8006534 <__swsetup_r+0x7c>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f850 	bl	80065d4 <__smakebuf_r>
 8006534:	89a0      	ldrh	r0, [r4, #12]
 8006536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800653a:	f010 0301 	ands.w	r3, r0, #1
 800653e:	d00a      	beq.n	8006556 <__swsetup_r+0x9e>
 8006540:	2300      	movs	r3, #0
 8006542:	60a3      	str	r3, [r4, #8]
 8006544:	6963      	ldr	r3, [r4, #20]
 8006546:	425b      	negs	r3, r3
 8006548:	61a3      	str	r3, [r4, #24]
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	b943      	cbnz	r3, 8006560 <__swsetup_r+0xa8>
 800654e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006552:	d1c4      	bne.n	80064de <__swsetup_r+0x26>
 8006554:	bd38      	pop	{r3, r4, r5, pc}
 8006556:	0781      	lsls	r1, r0, #30
 8006558:	bf58      	it	pl
 800655a:	6963      	ldrpl	r3, [r4, #20]
 800655c:	60a3      	str	r3, [r4, #8]
 800655e:	e7f4      	b.n	800654a <__swsetup_r+0x92>
 8006560:	2000      	movs	r0, #0
 8006562:	e7f7      	b.n	8006554 <__swsetup_r+0x9c>
 8006564:	20000064 	.word	0x20000064

08006568 <_sbrk_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_sbrk_r+0x1c>)
 800656c:	2300      	movs	r3, #0
 800656e:	4604      	mov	r4, r0
 8006570:	4608      	mov	r0, r1
 8006572:	602b      	str	r3, [r5, #0]
 8006574:	f7fa fde0 	bl	8001138 <_sbrk>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_sbrk_r+0x1a>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_sbrk_r+0x1a>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000474 	.word	0x20000474

08006588 <__swhatbuf_r>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006590:	2900      	cmp	r1, #0
 8006592:	b096      	sub	sp, #88	; 0x58
 8006594:	4615      	mov	r5, r2
 8006596:	461e      	mov	r6, r3
 8006598:	da0d      	bge.n	80065b6 <__swhatbuf_r+0x2e>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80065a0:	f04f 0100 	mov.w	r1, #0
 80065a4:	bf0c      	ite	eq
 80065a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80065aa:	2340      	movne	r3, #64	; 0x40
 80065ac:	2000      	movs	r0, #0
 80065ae:	6031      	str	r1, [r6, #0]
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	b016      	add	sp, #88	; 0x58
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	466a      	mov	r2, sp
 80065b8:	f000 f848 	bl	800664c <_fstat_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	dbec      	blt.n	800659a <__swhatbuf_r+0x12>
 80065c0:	9901      	ldr	r1, [sp, #4]
 80065c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80065c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80065ca:	4259      	negs	r1, r3
 80065cc:	4159      	adcs	r1, r3
 80065ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d2:	e7eb      	b.n	80065ac <__swhatbuf_r+0x24>

080065d4 <__smakebuf_r>:
 80065d4:	898b      	ldrh	r3, [r1, #12]
 80065d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065d8:	079d      	lsls	r5, r3, #30
 80065da:	4606      	mov	r6, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	d507      	bpl.n	80065f0 <__smakebuf_r+0x1c>
 80065e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	2301      	movs	r3, #1
 80065ea:	6163      	str	r3, [r4, #20]
 80065ec:	b002      	add	sp, #8
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	ab01      	add	r3, sp, #4
 80065f2:	466a      	mov	r2, sp
 80065f4:	f7ff ffc8 	bl	8006588 <__swhatbuf_r>
 80065f8:	9900      	ldr	r1, [sp, #0]
 80065fa:	4605      	mov	r5, r0
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7ff fb0f 	bl	8005c20 <_malloc_r>
 8006602:	b948      	cbnz	r0, 8006618 <__smakebuf_r+0x44>
 8006604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006608:	059a      	lsls	r2, r3, #22
 800660a:	d4ef      	bmi.n	80065ec <__smakebuf_r+0x18>
 800660c:	f023 0303 	bic.w	r3, r3, #3
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	e7e3      	b.n	80065e0 <__smakebuf_r+0xc>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	6020      	str	r0, [r4, #0]
 800661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	9b00      	ldr	r3, [sp, #0]
 8006624:	6163      	str	r3, [r4, #20]
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	6120      	str	r0, [r4, #16]
 800662a:	b15b      	cbz	r3, 8006644 <__smakebuf_r+0x70>
 800662c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006630:	4630      	mov	r0, r6
 8006632:	f000 f81d 	bl	8006670 <_isatty_r>
 8006636:	b128      	cbz	r0, 8006644 <__smakebuf_r+0x70>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	89a3      	ldrh	r3, [r4, #12]
 8006646:	431d      	orrs	r5, r3
 8006648:	81a5      	strh	r5, [r4, #12]
 800664a:	e7cf      	b.n	80065ec <__smakebuf_r+0x18>

0800664c <_fstat_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_fstat_r+0x20>)
 8006650:	2300      	movs	r3, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f7fa fd44 	bl	80010e6 <_fstat>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d102      	bne.n	8006668 <_fstat_r+0x1c>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	b103      	cbz	r3, 8006668 <_fstat_r+0x1c>
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	20000474 	.word	0x20000474

08006670 <_isatty_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	; (800668c <_isatty_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa fd43 	bl	8001106 <_isatty>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_isatty_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_isatty_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000474 	.word	0x20000474

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
